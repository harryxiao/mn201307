

1. dma buffer and data?
2. how to use buffer ops -> how to init
3. device name?


********************************************************************************
[register]

system-on-chip
code path: sound/soc/intel/boards/

(1) register a driver for platform-level devices, platform driver
structure is struct platform_driver broxton_audio:

module_platform_driver(broxton_audio)
	//sound/soc/intel/boards/bxt_gpmrb.c
|-> broxton_audio_probe //bxt_gpmrb.c
	<=> static struct platform_driver broxton_audio = {
				.probe = broxton_audio_probe,
				.remove = broxton_audio_remove,
				.driver = {
						.name = "gpmrb_machine",
				},
		};
	|-> snd_soc_register_card //sound/soc/soc-core.c
		//Register a card with the ASoC core
		|-> snd_soc_instantiate_card //soc-core.c
			|-> soc_probe_link_dais //sound/soc/soc-core.c
				|-> soc_new_pcm // sound/soc/soc-pcm.c
					//create a new pcm 
					|-> ret = platform->driver->pcm_new(rtd);
						//sound/soc/soc-pcm.c
						<=> static struct snd_soc_platform_driver skl_platform_drv  = {//sound/soc/intel/skylake/skl-pcm.c
								.probe		= skl_platform_soc_probe,
								.ops		= &skl_platform_ops,
								.pcm_new	= skl_pcm_new,
								.pcm_free	= skl_pcm_free,
							};
						|-> skl_pcm_new //sound/soc/intel/skylake/skl-pcm.c
							|-> snd_pcm_lib_preallocate_pages_for_all
								//pre-allocation for continuous memory type (all substreams)
								|-> |-> snd_pcm_lib_preallocate_pages //sound/core/pcm_memory.c
										//pre-allocation for the given DMA type
										|-> // pre-allocate the buffer and create a proc file for the substream
											snd_pcm_lib_preallocate_pages1 //pcm_memory.c
											|-> preallocate_pcm_pages(substream, size);
												 //sound/core/pcm_memory.c
												 //try to allocate as the large pages as possible.
												|-> snd_dma_alloc_pages 
													//sound/core/memalloc.c
													//allocate the buffer area according to the given type
********************************************************************************
//sound/core/pcm_native.c
const struct file_operations snd_pcm_f_ops[2] = {
	{
		.owner =		THIS_MODULE,
		.write =		snd_pcm_write,
		.write_iter =		snd_pcm_writev,
		.open =			snd_pcm_playback_open,
		.release =		snd_pcm_release,
		.llseek =		no_llseek,
		.poll =			snd_pcm_playback_poll,
		.unlocked_ioctl =	snd_pcm_playback_ioctl,
		.compat_ioctl = 	snd_pcm_ioctl_compat,
		.mmap =			snd_pcm_mmap,
		.fasync =		snd_pcm_fasync,
		.get_unmapped_area =	snd_pcm_get_unmapped_area,
	},
	{
		.owner =		THIS_MODULE,
		.read =			snd_pcm_read,
		.read_iter =		snd_pcm_readv,
		.open =			snd_pcm_capture_open,
		.release =		snd_pcm_release,
		.llseek =		no_llseek,
		.poll =			snd_pcm_capture_poll,
		.unlocked_ioctl =	snd_pcm_capture_ioctl,
		.compat_ioctl = 	snd_pcm_ioctl_compat,
		.mmap =			snd_pcm_mmap,
		.fasync =		snd_pcm_fasync,
		.get_unmapped_area =	snd_pcm_get_unmapped_area,
	}
}
//sound/core/pcm.c
static int snd_pcm_dev_register(struct snd_device *device)
{
	...
	/* register pcm */
	err = snd_register_device(devtype, pcm->card, pcm->device,
				  &snd_pcm_f_ops[cidx], pcm,
				  &pcm->streams[cidx].dev);
}
********************************************************************************
static struct snd_soc_dai_ops skl_pcm_dai_ops = {  
	.startup = skl_pcm_open,
	.shutdown = skl_pcm_close,
	.prepare = skl_pcm_prepare,
	.hw_params = skl_pcm_hw_params,
	.hw_free = skl_pcm_hw_free,
	.trigger = skl_pcm_trigger,
};
static struct snd_soc_dai_driver skl_fe_dai[] = {
	...

backtrace:
hdac_ext_writeb [snd_hda_ext_core]
snd_hdac_stream_start [snd_hda_core]
skl_decoupled_trigger [snd_soc_skl]
skl_pcm_trigger [snd_soc_skl]
soc_pcm_trigger
dpcm_fe_dai_do_trigger
dpcm_fe_dai_trigger
snd_pcm_do_start
snd_pcm_action_single
snd_pcm_action
snd_pcm_common_ioctl1
? inode_has_perm.isra.33
snd_pcm_playback_ioctl1
snd_pcm_playback_ioctl
do_vfs_ioctl
? security_file_ioctl
SyS_ioctl
entry_SYSCALL_64_fastpath

***********************************************************************
hdac_ext_writeb [snd_hda_ext_core]
snd_hdac_stream_start [snd_hda_core]
snd_hdac_dsp_trigger [snd_hda_core]
skl_dsp_trigger [snd_soc_skl]
bxt_load_base_firmware [snd_soc_skl_ipc]
? devres_add
bxt_sst_init_fw [snd_soc_skl_ipc]
skl_platform_soc_probe [snd_soc_skl]
snd_soc_platform_drv_probe
soc_probe_component
snd_soc_register_card
? printk+0x48/0x50
broxton_audio_probe [snd_soc_bxt_gpmrb]
platform_drv_probe
? devices_kset_move_last
driver_probe_device
__driver_attach
? driver_probe_device
bus_for_each_dev
driver_attach
bus_add_driver
driver_register
__platform_driver_register
broxton_audio_init [snd_soc_bxt_gpmrb]
do_one_initcall
do_init_module
load_module
? __symbol_put
SYSC_init_module
SyS_init_module
entry_SYSCALL_64_fastpath

********************************************************************************
void snd_hdac_stream_start(struct hdac_stream *azx_dev, bool fresh_start)
|-> snd_hdac_stream_updateb(azx_dev, SD_CTL,
				0, SD_CTL_DMA_START | SD_INT_MASK);

#define snd_hdac_stream_updateb(dev, reg, mask, val) \
	snd_hdac_stream_writeb(dev, reg, \
			       (snd_hdac_stream_readb(dev, reg) & \
				~(mask)) | (val))

#define snd_hdac_stream_writeb(dev, reg, value) \
	_snd_hdac_stream_write(b, dev, AZX_REG_ ## reg, value)

#define _snd_hdac_stream_write(type, dev, reg, value)			\
	((dev)->bus->io_ops->reg_write ## type(value, (dev)->sd_addr + (reg)))

azx_dev : HD-audio core stream object

include/sound/hda_register.h
/* stream register offsets from stream base */
#define AZX_REG_SD_CTL			0x00

--------

module_pci_driver(skl_driver);

/* pci_driver definition */
static struct pci_driver skl_driver = {
	.name = KBUILD_MODNAME,
	.id_table = skl_ids,
	.probe = skl_probe,
	.remove = skl_remove,
	.shutdown = skl_shutdown,
	.driver = {
		.pm = &skl_pm,
	},
};
<=>
skl_probe //sound/soc/intel/skylake/skl.c
|-> skl_first_init //sound/soc/intel/skylake/skl.c
	|-> /* initialize streams */
		snd_hdac_ext_stream_init_all
			(ebus, 0, cp_streams, SNDRV_PCM_STREAM_CAPTURE);
		start_idx = cp_streams;
		snd_hdac_ext_stream_init_all
			(ebus, start_idx, pb_streams, SNDRV_PCM_STREAM_PLAYBACK);
		<=>
		// create and initialize the stream objects, //hda/ext/hdac_ext_stream.
		snd_hdac_ext_stream_init_all
		|-> snd_hdac_ext_stream_init //hda/ext/hdac_ext_stream.c
			|-> //initialize each stream (aka device); /hda/hdac_stream.c
				void snd_hdac_stream_init(struct hdac_bus *bus, struct hdac_stream *azx_dev,
							  int idx, int direction, int tag)
					|-> azx_dev->sd_addr = bus->remap_addr + (0x20 * idx + 0x80);

--------
skl_first_init //sound/soc/intel/skylake/skl.c
|-> bus->addr = pci_resource_start(pci, 0);
|-> bus->remap_addr = pci_ioremap_bar(pci, 0); //defined: drivers/pci/pci.c
	|-> struct resource *res = &pdev->resource[bar];
	|-> return ioremap_nocache(res->start, resource_size(res)); //arch/x86/mm/ioremap.c


********************************************************************************

static struct sst_acpi_mach sst_bxtp_devdata[] = {
	...
	{ "INT34C3", "gpmrb_machine" , "intel/dsp_fw_bxtn.bin", NULL, NULL, NULL },
};


/* PCI IDs */
static const struct pci_device_id skl_ids[] = {
	...
	/* BXT-P */
	{ PCI_DEVICE(0x8086, 0x5a98),
		.driver_data = (unsigned long)&sst_bxtp_devdata},
	...
	{ 0, }
};
MODULE_DEVICE_TABLE(pci, skl_ids);

********************************************************************************
//include/sound/hda_register.h
/* SD offset: SDI0=0x80, SDI1=0xa0, ... SDO3=0x160 */
enum { SDI0, SDI1, SDI2, SDI3, SDO0, SDO1, SDO2, SDO3 };

/* stream register offsets from stream base */
#define AZX_REG_SD_BDLPL		0x18
#define AZX_REG_SD_BDLPU		0x1c
