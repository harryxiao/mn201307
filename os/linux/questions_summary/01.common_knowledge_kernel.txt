v4l2的操作流程？
内核保护临界资源有哪些方式?
互斥锁和自旋锁区别？
中断该用什么锁？
中断里能不能分配内存？

kmalloc是什么意思？和malloc 有什么区别？
进程上下文和中断上下文有什么不一样？


the linux device model
----------------------
(1) kobject, kset, ktype 这三个结构联合起来一起构成了整个设备模型的基石.
bus, device, device_driver, 则是基于kobject.kset.ktype之上的架构. 

(2) bus_register()
	/sys/bus/mmc/
	devices ： 设备的文件化
	drivers ： 驱动的文件化
	drivers_autoprobe ：是否自动，支持读写的。（cat，echo）
	drivers_probe ：驱动匹配
	uevent ：在 sysfs 下的很多 kobject 下都有 uevent 属性，它主要用于内核与 udev
	(自动设备发现程序)之间的一个通信接口 

(3) 类是一个设备的高层视图，它抽象出了底层的实现细节，从而允许用户空间使用设备所提供的功能，
	而不用关心设备是如何连接和工作的。类成员通常由上层代码所控制，而无需驱动的明确支持。
	但有些情况下驱动也需要直接处理类。类存在的真正目的是给作为类成员的各个设备提供一个容器

kernel question

================================================================================
1. linux 驱动对可执行程序和shell 脚本的执行过程？
	system call
	设备节点(如字符设备)
	文件操作 file_operations: open/read/write/ioctl

================================================================================
2. linux 对中断和异常的响应， 用户态如何切入内核态，spin_lock 和 
	mutex_lock 的区别？

	中断：
		中断到来，会改变中断引脚的状态，触发中断服务例程，调用具体的中断处理程序;
		它会遍历中断号上的所有中断处理程序，
	异常处理例程
		访问的某一个地址，缺页异常，就会触发异常处理程序

	用户态通过系统调用来切入内核态
	system call: int 0x80 或 sysenter
	用户空间程序需要把系统调用号存入rax寄存器.

	spin_lock 忙等待，不会放弃 cpu 控制权，不会睡眠，中断中可用;
	它保护的临界资源的操作一般比较短，快进快出，预期等待很短的时间
	其他持有者就会释放锁.
	mutex_lock 会睡眠，进行上下文切换，将进程保存到 pending 的队列中;
	实现了一个互斥的访问控制，同一时刻只能被一个访问者访问。对临界区的
	操作时间比较长，允许休眠的可以使用。上下文切换也耗费系统开销。


================================================================================
3. linux 设备驱动模型，i2c/spi adapter 驱动.
	kobject 对象与sys/ 目录下的目录有对应关系，subsystem, kset
	嵌入到结构体中
	
	i2c 控制器对应 adapter, client 对应挂在adapter上的slave，
	针对 slave 设备的驱动，都会调用到 i2c core 向下提供的接口，
	比如i2c_transfer。填好的i2c_message 用于发送命令. 


================================================================================
4. android binder 和 linux IPC 机制（如 FIFO, pipe, socket）

	用户态进程有自己的地址空间

	进程间，用户空间的数据不可共享，所以用户空间 = 不可共享空间
	进程间，内核空间的数据可共享，所以内核空间 = 可共享空间

	为了保证 安全性 & 独立性，一个进程 不能直接操作或者访问另一个进程，
	即Android的进程是相互独立、隔离的

	跨进程间通信(IPC)的原理 
	(1) 先通过 进程间 的内核空间进行 数据交互;
	(2) 再通过 进程内 的用户空间 & 内核空间进行 数据交互，从而实现 进程间的用户空间
	的数据交互

	管道(pipe) 用于具有亲缘关系进程间的通信，
	创建命名管道mkfifo，FIFO创建后，可以像普通文件一样对其访问。
	有名管道除具有管道所具有的功能外，能用于无亲缘关系进程间的通信；

	socket 套接字，用于网络通信
	tcp/udp:
	tcp 会有三次握手，数据可靠性比较高
	udp 会丢帧，一般视频聊天用的是udp

	client/server


	send:
	(1) socket() 创建一个socket, SOCK_STREAM 对应tcp 的 socket
	(2) 填充 sockaddr_in 结构体, sin_family, sin_port, sin_addr.s_sddr 字段
		connect() 发起连接
	(3) send()

	recv:
	(1) socket()
	(2) bind()
	(3) listen()
	(4) accept()
	(5) recv()

	你也可以写一个虚拟设备的驱动模块，用于数据交换，比如，向设备文件中写数据，
	会调用驱动中的 write 函数，将数据写到内存中;
	在另一个进程，读设备节点，虚拟驱动中的read 将数据从内存中返回给用户空间。


	binder 驱动
	Client进程、Server进程 & Service Manager 进程之间的交互都必须通过Binder驱动
	（使用 open 和 ioctl文件操作函数），而非直接交互
	1. Server 进程向binder 驱动注册服务
	2. Client 进程 向binder驱动 获取服务并使用服务
	3. Servicemanager  进程与 binder 驱动交互

	Servicemanager 管理service 注册与查询，类似于路由器？ 


	socket 在内核中的实现？

		iso模型			TCP/IP模型	
user space: 
		应用层(L7)\		应用层	 
		表示层(L6)|>
		会话层(L5)/

kernel space:
	内核网络协议栈：
		传输层(L4)		传输层
		网络层(L3)		网络层	
	内核驱动：
		数据链路层(L2)

hardware:
		物理层(L1)		网络访问层(L2+L1)
