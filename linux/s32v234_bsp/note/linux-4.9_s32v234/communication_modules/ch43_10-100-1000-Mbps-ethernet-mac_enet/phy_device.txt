phy_device.c
==============================

├── drivers
    ├── net
        ├── ethernet
        │   ├── freescale
        │       ├── fec_main.o
        │       ├── fec.o
        │       └── fec_ptp.o
        ├── phy
            ├── bcm7xxx.o
            ├── bcm87xx.o
            ├── bcm89xxx.o
            ├── broadcom.o
            ├── fixed_phy.o
            ├── libphy.o
            ├── mdio_bus.o
            ├── micrel.o
            ├── nxp
            │   ├── nxp.ko
            │   └── nxp.o
            ├── phy_device.o
            └── phy.o

==============================
drivers/net/
phy/phy.c
phy/phy_device.c  //KSZ9031
phy/micrel.c
phy/mdio_bus.c

----------------
phy/phy_device.c
* Framework for finding and configuring PHYs.
* Also contains generic PHY driver

subsys_initcall(phy_init);
                   |
+------------------+
|
|-> mdio_bus_init
|-> phy_drivers_register

-------------
mdio_bus_init //mdio_bus.c
|-> class_register(&mdio_bus_class);
|-> bus_register(&mdio_bus_type);

================================
static struct phy_driver genphy_driver[] = {
	{
		...
	 // Called to initialize the PHY,
	 // including after a reset
	.config_init	= genphy_config_init,
		...
	},
	{
	}

};

-----------


phy_init_hw //phy/phy_device.c
|-> phydev->drv->soft_reset(phydev);
|-> phy_scan_fixups(phydev);
|-> phydev->drv->config_init(phydev);

========================================
========================================
micrel.c
static struct phy_driver ksphy_driver[] = {
	...
	{
		.phy_id		= PHY_ID_KSZ9031,
		.phy_id_mask	= 0x00fffff0,
		.name		= "Micrel KSZ9031 Gigabit PHY",
		.features	= (PHY_GBIT_FEATURES | SUPPORTED_Pause),
		.flags		= PHY_HAS_MAGICANEG | PHY_HAS_INTERRUPT,
		.driver_data	= &ksz9021_type,
		.config_init	= ksz9031_config_init,
		.config_aneg	= genphy_config_aneg,
		.read_status	= genphy_read_status,
		.ack_interrupt	= kszphy_ack_interrupt,
		.config_intr	= kszphy_config_intr,
		.suspend	= genphy_suspend,
		.resume		= genphy_resume,
		.driver		= { .owner = THIS_MODULE, },
	}, 
	...
};

Helper macro for registering PHY drivers
module_phy_driver(ksphy_driver);


========================================
how to identify phy id?

get_phy_device //reads the specified PHY device and returns its @phy_device struct
//phy_device.c
|-> get_phy_id
|-> phy_device_create

----------------
//phy_device.c
phy_device_register - Register the phy device on the MDIO bus
|-> phydev->bus->phy_map[phydev->addr] = phydev;
|-> phy_scan_fixups
|-> device_add //add device to device hierarchy

========================================
how to select a phy when there are more than one phy?
