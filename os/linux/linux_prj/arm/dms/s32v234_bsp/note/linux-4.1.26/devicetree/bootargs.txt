bootargs


==========
1. uboot
//wrong
//bootargs=console=ttyLF0 root=/dev/ram rw

=> printenv mmcargs 
mmcargs=setenv bootargs console=${console},${baudrate} root=${mmcroot}
=> setenv mmcargs setenv bootargs initcall_debug ignore_loglevel console=${console},${baudrate} root=${mmcroot}
=> run bootcmd 


root@s32v234evb:~# cat /sys/module/kernel/parameters/initcall_debug 
Y
root@s32v234evb:~# cat /sys/module/printk/parameters/ignore_loglevel 
Y
root@s32v234evb:~# cat /proc/cmdline 
initcall_debug console=ttyLF0,115200 root=/dev/mmcblk0p2 rootwait rw

----
[init/main.c]
bool initcall_debug;
core_param(initcall_debug, initcall_debug, bool, 0644);

==========
2. kernel



[drivers/of/fdt.c]

early_init_dt_scan
|-> early_init_dt_scan_nodes
	|-> /* Retrieve various information from the /chosen node */
		of_scan_flat_dt(early_init_dt_scan_chosen, boot_command_line);

		early_init_dt_scan_chosen
		|-> //Retrieve command line
			p = of_get_flat_dt_prop(node, "bootargs", &l);
		|-> #ifdef CONFIG_CMDLINE
			#ifndef CONFIG_CMDLINE_FORCE
				if (!((char *)data)[0])
			#endif
					strlcpy(data, CONFIG_CMDLINE, COMMAND_LINE_SIZE);
			#endif /* CONFIG_CMDLINE */

/*
* CONFIG_CMDLINE is meant to be a default in case nothing else
* managed to set the command line, unless CONFIG_CMDLINE_FORCE
* is set in which case we override whatever was found earlier.
*/
---------------
rda600_defconfig:
# Boot options
#
CONFIG_CMDLINE="console=ttyLF0"
# CONFIG_CMDLINE_FORCE is not set

---------------
[arch/arm64/kernel/setup.c]
setup_arch
|-> setup_machine_fdt

---------------------
start_kernel	[init/main.c]
|-> setup_arch(&command_line);


===================================
ignore_loglevel

kernel/printk/printk.c


static bool __read_mostly ignore_loglevel;

static int __init ignore_loglevel_setup(char *str)
{
	ignore_loglevel = true;
	pr_info("debug: ignoring loglevel setting.\n");

	return 0;
}

early_param("ignore_loglevel", ignore_loglevel_setup);
module_param(ignore_loglevel, bool, S_IRUGO | S_IWUSR);
MODULE_PARM_DESC(ignore_loglevel,
		 "ignore loglevel setting (prints all kernel messages to the console)");

===================================
bootarts
https://stackoverflow.com/questions/48801998/passing-bootargs-via-chosen-node-in-device-tree-not-working-for-beaglebone-black

the kernel command line provided by the bootloader (i.e. U-Boot) is the actual
list of parameters currently used when you boot the board.

For ARM Linux the default kernel configuration gives precedence to the 
bootloader's command line over the default kernel command string and the 
bootargs in the chosen node in the Device Tree.

There are actually three possible ARM kernel boot configuration choices:

Kernel command line type:
  (X) Use bootloader kernel arguments if available  
  ( ) Extend bootloader kernel arguments
  ( ) Always use the default kernel command string

If you want to always ignore the command line in U-Boot's bootargs variable
(and the command line from the DT), but exclusively use the default kernel
command string as defined in CONFIG_CMDLINE, then the kernel should be 
configured for the third choice (CONFIG_CMDLINE_FORCE) on that list.
Note that this list of choices is only available when CONFIG_ATAGS is enabled
("Support for the traditional ATAGS boot data passing").

The scheme that selects the DT bootargs is to use the existing kernel
configuration, but simply delete that U-Boot environment variable 
(i.e. setenv bootargs).  If you change U-Boot's bootargs variable to an empty 
string as mentioned in another answer, the kernel will use its default kernel 
command string (CONFIG_CMDLINE) rather than the DT.

The bootargs from the chosen node in the DT is still considered an external source.

----------
taking the bootargs value passed in the DT chosen node. 
clear up the bootargs set by u-boot
=> setenv mmcargs setenv bootargs
disable CONFIG_CMDLINE_FORCE
----------
the kernel is booting with default kernel booting string
enable the CONFIG_CMDLINE_FORCE

