diff --git a/private/package_test/arch_s5l/test_image.c b/private/package_test/arch_s5l/test_image.c
index 4f05002..b27bd10 100644
--- a/private/package_test/arch_s5l/test_image.c
+++ b/private/package_test/arch_s5l/test_image.c
@@ -3,6 +3,7 @@
  *
  * History:
  *    2010/03/25 - [Jian Tang] created file
+ *    2018/11/15 - [Ma Ning] roi support
  *
  * Copyright (c) 2016 Ambarella, Inc.
  *
@@ -68,6 +69,31 @@
 #include "AmbaDSP_ImgUtility.h"
 #include "img_customer_interface_arch.h"
 
+#define ROI_SUPPORT_ENABLE
+
+#ifdef ROI_SUPPORT_ENABLE
+#include <sys/types.h>
+#include <sys/socket.h>
+
+#define DEBUG_ROI
+#define UNIX_DOMAIN_SOCKET
+
+#ifdef UNIX_DOMAIN_SOCKET
+#include <sys/un.h>
+#else
+#include <netinet/in.h>
+#define PORT 1500
+#endif
+#define BACKLOG 5
+
+int skfd;
+
+struct roi_info {
+	int chan_id;
+	mw_ae_metering_table roi_tbl;
+};
+#endif /*ROI_SUPPORT_ENABLE*/
+
 #define	CHECK_RANGE(value, min, max) do {	\
 			if (((value) > (max)) || ((value) < (min))) {		\
 				printf("Error:The value must be [%d~%d]!\n", (min), (max));	\
@@ -2324,6 +2350,7 @@ static void sigstop(int signo)
 		mw_stop_aaa();
 	}
 	close(fd_iav);
+	close(skfd);
 	exit(1);
 }
 
@@ -2614,6 +2641,174 @@ static int run_test_options(u32 option)
 	return rval;
 }
 
+#ifdef ROI_SUPPORT_ENABLE
+#ifdef DEBUG_ROI
+int test_adjust_roi(void)
+{
+	int num = 1;
+	int ret = 0;
+
+	printf("num=%d\r\n", num);
+
+	mw_ae_metering_table custom_ae_metering_table[2] = {
+		{	//Left half window as ROI
+#if 0
+			{
+				1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
+				1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
+				1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
+				1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
+				1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
+				1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
+				1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
+				1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
+			}
+#else
+			{
+				5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0,
+				5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0,
+				5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0,
+				5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0,
+				5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0,
+				5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0,
+				5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0,
+				5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0,
+			}
+#endif
+		},
+
+		{	//Right half window as ROI
+			{
+				0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
+				0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
+				0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
+				0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
+				0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
+				0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
+				0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
+				0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
+			}
+		},
+	};
+
+#if 1
+	mw_set_ae_metering_mode_multi(MW_AE_CUSTOM_METERING, 0);
+	ret = mw_set_ae_metering_table_multi(&custom_ae_metering_table[num], 0);
+	printf("mw_set_ae_metering_table_multi %d\n", ret);
+	if (ret < 0) {
+		printf("mw_set_ae_metering_table_multi error: ret=%d\n", ret);
+	}
+#endif
+
+	return 0;
+}
+#endif /*DEBUG_ROI*/
+
+void adjust_roi(mw_ae_metering_table *roi_tbl, int chan_id)
+{
+	int ret = 0;
+
+	mw_set_ae_metering_mode_multi(MW_AE_CUSTOM_METERING,chan_id);
+	ret = mw_set_ae_metering_table_multi(roi_tbl, chan_id);
+#ifdef DEBUG_ROI
+	printf("mw_set_ae_metering_table_multi: ret=%d\n", ret);
+#endif
+	if (ret < 0) {
+		printf("mw_set_ae_metering_table_multi error: ret=%d\n", ret);
+	}
+}
+
+static int start_adjust_roi_server(void)
+{
+	struct roi_info ae_roi_info;
+
+	int num = 1;
+	printf("num=%d\r\n", num);
+
+	mw_ae_metering_table roi_tbl;
+	memset(&roi_tbl, 0, sizeof(roi_tbl));
+	memset(&ae_roi_info, 0, sizeof(ae_roi_info));
+
+#ifdef UNIX_DOMAIN_SOCKET
+	int sockfd;
+	int new_fd;
+	struct sockaddr_un srv_addr;
+	struct sockaddr_un client_addr;
+
+	int domain = AF_UNIX;
+
+	/* delete the socket file */
+	unlink("/dev/socket/server_roi");
+#else
+	int sockfd;
+	int new_fd;
+	struct sockaddr_in srv_addr;
+	struct sockaddr_in client_addr;
+
+	int domain = AF_INET;
+#endif
+	int len;
+
+	sockfd = socket(domain, SOCK_STREAM, 0);
+	if (sockfd == -1) {
+		printf("[server] socket failed:%d", errno);
+		return -1;
+	}
+
+#ifdef UNIX_DOMAIN_SOCKET
+	srv_addr.sun_family = AF_UNIX;
+	strcpy(srv_addr.sun_path, "/dev/socket/server_roi");
+#else
+	srv_addr.sin_family = AF_INET;
+	srv_addr.sin_port = htons(PORT);
+	srv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
+	bzero(&(srv_addr.sin_zero), 8);
+#endif
+
+	if (bind(sockfd, (struct sockaddr*)&srv_addr, sizeof(srv_addr)) < 0) {
+		printf("[server] bind error\n");
+		close(sockfd);
+		return -1;
+	}
+
+	skfd = sockfd;
+
+	listen(sockfd, BACKLOG);
+
+	len = sizeof(srv_addr);
+	while (1) {
+		new_fd = accept(sockfd, (struct sockaddr*)&client_addr, (socklen_t *)&len);
+		if (new_fd == -1) {
+			printf("[server] receive failed\n");
+		} else {
+			printf("[server] receive success\n");
+
+			recv(new_fd, &ae_roi_info, sizeof(ae_roi_info), 0);
+#ifdef DEBUG_ROI
+			printf("[server] Received:\n");
+			printf("chan_id: %d\n", ae_roi_info.chan_id);
+
+			int *proi = ae_roi_info.roi_tbl.metering_weight;
+			//int mtr_wgt = sizeof(ae_roi_info.roi_tbl.metering_weight);
+			int mtr_wgt = 12*8;
+			printf("mtr_wgt=%d\n", mtr_wgt);
+
+			for (int i=0; i < mtr_wgt; i++) {
+				if (i % 12 == 0) {
+					printf("\r\n");
+				}
+				printf("%d, ", proi[i]);
+			}
+			printf("\r\n");
+#endif
+			adjust_roi(&ae_roi_info.roi_tbl, ae_roi_info.chan_id);
+		}
+	}
+
+	return 0;
+}
+#endif /*ROI_SUPPORT_ENABLE*/
+
 int main(int argc, char ** argv)
 {
 	signal(SIGINT, sigstop);
@@ -2676,9 +2871,14 @@ int main(int argc, char ** argv)
 		}
 		switch (work_mode) {
 			case BACKGROUND_MODE:
+#ifdef ROI_SUPPORT_ENABLE
+				printf("#mn: BACKGROUND_MODE\n");
+				start_adjust_roi_server();
+#else
 				while (1) {
 					sleep(2);
 				}
+#endif /*ROI_SUPPORT_ENABLE*/
 				break;
 			case INTERACTIVE_MODE:
 				if (run_interactive_mode() < 0) {
