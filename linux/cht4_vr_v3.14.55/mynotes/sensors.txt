sensors

1.sensor code 分布

传感器系统
java部分:
	frameworks/base/core/java/android/hardware/

jni部分：
	frameworks/base/core/jni/android_hardware_SensorManager.cpp

HAL层：
	头文件：
	hardware/libhardware/include/hardware/sensors.h
	具体实现:
	vendor/intel/hardware/ish-sensors/vr_sensors/
		会通过libsensorhub.so中的接口实现与daemon通信

daemon:
	守护进程：
	vendor/intel/hardware/libsensorhub/vr_libsensorhub/:
	    src/daemon/	--> sensorhubd 		: init.rc 中启用一个service
	    src/lib/	--> libsensorhub.so	: sensor HAL 通过 dlopen打开libsensorhub.so,
	然后，通过dlsym保存其中的接口

驱动层(IPC通信):
	kernel/cht/drivers/hwmon/vr_sensors/
	通过SPI实现与sensorhub通信

sensorhub(stm32f411):
	accl gyro magn 挂在stm32上
	fusion算法在main中的while循环中被调用


2.sensor 系统架构
	java -- jni -- HAL -- daemon -- ipc driver -- sensorhub

================================================================================
daemon/main.c:
	is_first_instance()
	|
	while(1) : getopt_long() 
	|
	sensor_state_t struct
	|-- malloc/memset
	char flush_completion_frame[MAX_UNIT_SIZE];
	|-- memset
	while(1)
	|-- |
		|-- reset_sensorhub();
	   		|-- close(): close the following fd: ctlfd/dataf/sockfd/datasizefd/fwversionfd
			|-- dirp = opendir("/sys/class/hwmon")
			|-- while ((entry = readdir(dirp)) != NULL)
				|-- strcmp() :"." || ".." -> continue
				|-- snprintf() : "/sys/class/hwmon/%s/device/modalias" -> node_path
				|-- fd = open(node_path, O_RDONLY); fd == -1 -> continue
				|--	read(fd, magic_string, 32);
					magic_string[31] = '\0';
				|--	close(fd);
				|-- strstr(magic_string, "vr") : platform = CHERRYTRAIL; //end while
			|-- if (found == 0) : exit(EXIT_FAILURE);
			|-- snprintf : "/sys/class/hwmon/%s/device/control" -> node_path
				ctlfd = open(node_path, O_WRONLY);
				open data data_size  fw_verion_compare node as the same way
			|-- sockfd = android_get_control_socket(UNIX_SOCKET_PATH);//create sensorhubd Unix socket
			|-- closedir(dirp);
		|-- if(platform == CHERRYTRAIL) :log_message
		|-- get_status();
			|-- current_sensor_index = fake_sensor_enumeration();
					|-- struct sensor_info fake_sensor_table[] = {
					|-- use fake_sensor_table init sensor_list
					|-- return current_sensor_index;
			|-- if (current_sensor_index > MAX_SENSOR_INDEX) {
					sensor_list = realloc(sensor_list, sizeof(sensor_state_t) * (current_sensor_index + 1));
			|-- strncpy(sensor_list[current_sensor_index].name, "EVENT", sizeof("EVENT"));
				current_sensor_index++;
		|-- start_sensorhubd();
			|-- /* two fd_set for I/O multiplexing */
				FD_ZERO(&listen_fds);
				FD_ZERO(&read_fds);

				/* add sockfd to listen_fds */
				FD_SET(sockfd, &listen_fds);

				fd_set datasize_fds;
				FD_ZERO(&datasize_fds);

				if (datasizefd > maxfd)
					maxfd = datasizefd;
			|-- while (1) { //loop
				|-- read_fds = listen_fds;
					FD_SET(datasizefd, &datasize_fds);
				|-- if (select(maxfd + 1, &read_fds, NULL, &datasize_fds, NULL)
				|-- /*1. handle new connection request */
					if (FD_ISSET(sockfd, &read_fds)) {
						int clientfd = accept(sockfd, (struct sockaddr *) &client_addr,	&addrlen);

						FD_SET(clientfd, &listen_fds);
						if (clientfd > maxfd)
							maxfd = clientfd;

						FD_CLR(sockfd, &read_fds);
				|
				|-- /*2. get data from data node and dispatch it to clients */
					if (FD_ISSET(datasizefd, &datasize_fds))
						dispatch_data();
				|
				|-- /*3. handle request from clients */
					int i;
					for (i = maxfd; i >= 0; i--) {
						char message[MAX_MESSAGE_LENGTH];

						if (!FD_ISSET(i, &read_fds))
							continue;

						int length = recv(i, message, MAX_MESSAGE_LENGTH, 0);
						if (length <= 0) {
							/* release session resource if necessary */
							remove_session_by_fd(i);
							close(i);
							log_message(CRITICAL, "fd %d:error reading message \n", i);
							FD_CLR(i, &listen_fds);
						} else {
							/* process message */
							handle_message(i, message);
						}
					}

--------------------------------------------------------------------------------
start_sensorhubd():
	//it`s the main loop: select -- sockfd -- datasize_fds -- connected socket

	while(1):
		1.  select() monitor read_fds and datasize_fds 
			read_fds: sockfd (used for connection with it`s socket client)
			datasize_fds: datasizefd (used for monitor the driver`s report data)

			note:
			On  exit,  the sets  are  modified  in place to indicate which file
			descriptors actually changed status. Each of the three file descriptor
			sets may be specified as  NULL  if  no file descriptors are to be 
			watched for the corresponding class of events.

		2.  test to see if sockfd become "ready":
			if (FD_ISSET(sockfd, &read_fds))
			FD_ISSET() tests  to see if a file descriptor is part of the set;
			if sockfd become "ready", perform the following steps to handle new
			connection request:

			(1) create a new connected socket:
				int clientfd = accept(sockfd, (struct sockaddr *) &client_addr,
						&addrlen);

			(2)	add it to listen_fds, (at the begin of next loop, listen_fds
				is used to initialize read_fds)
				FD_SET(clientfd, &listen_fds);

			(3)	remove sockfd from read_fds set:
				FD_CLR(sockfd, &read_fds);

		3.  test to see if datasizefd become "ready":
			if datasizefd becom "ready", dispatch data.
			if (FD_ISSET(datasizefd, &datasize_fds))
				dispatch_data();

		4.  check the fd one by one from maxfd to 0, use FD_ISSET() to see which
			connected socket become "ready" in read_fds. Then call recv() to 
			receive message from a socket and return the message length.

			if length <= 0: release session resource if necessary
				remove_session_by_fd(i);
				close(i);
				FD_CLR(i, &listen_fds);

			else: process message
				handle_message(i, message);

--------------------------------------------------------------------------------
dispatch_data():

	1.  read data_size node and convert the string to digital:
		lseek(datasizefd, 0, SEEK_SET);
		ret = read(datasizefd, datasize_buf, 8);

		datasize_buf[7] = '\0';
		sscanf(datasize_buf, "%d", &data_size);

	2.  read data node
		while (left > 0) {
			ret = read(datafd, buf + data_size - left, left);
			if (ret <= 0)
				return;

			left = left - ret;
		}
	
	3. convert buf to the pointer to the cmd_resp structure
		p_cmd_resp = (struct cmd_resp *) buf;
		p = buf;

	4.  while (ret > 0) { //data_size > 0
		p_cmd_resp->cmd_type
		(1) RESP_CMD_ACK
			dispatch_cmd_ack(p_cmd_resp);

		(2) RESP_GET_SINGLE || RESP_BIST_RESULT
			dispatch_get_single(p_cmd_resp);

		(3) RESP_STREAMING
			dispatch_streaming(p_cmd_resp);

		(4) RESP_PSH_EVT
			#define PSH_EVT_ID_FLUSH_DONE ((unsigned char)1)
			struct resp_psh_evt {
				unsigned char evt_id;
				unsigned char evt_buf_len;
				char evt_buf[0];
			} __attribute__ ((packed));
			struct resp_psh_evt *p = (struct resp_psh_evt *)p_cmd_resp->buf;

			if (p_cmd_resp->data_len != sizeof(*p) + p->evt_buf_len)

			if (p->evt_id == PSH_EVT_ID_FLUSH_DONE)
				dispatch_flush();
			
		(5) RESP_CAL_RESULT

			struct cmd_calibration_param param;
			struct resp_calibration *p = (struct resp_calibration*)p_cmd_resp->buf;

			if (p_cmd_resp->data_len != sizeof(struct resp_calibration) + p->info.size)
			param.sub_cmd = SUBCMD_CALIBRATION_GET;
			param.calibrated = p->calib_result;
			memcpy(&param.cal_param, &p->info, sizeof(p->info) + p->info.size);
			
			handle_calibration(&param, p_cmd_resp->sensor_id);
			
		(6) RESP_ADD_EVENT
			handle_add_event_resp(p_cmd_resp);
		
		(7) RESP_CLEAR_EVENT
			handle_clear_event_resp(p_cmd_resp);
		
		(8) RESP_EVENT
			dispatch_event(p_cmd_resp);

		(9)
			//remain data len
			ret = ret - (sizeof(struct cmd_resp) + p_cmd_resp->data_len);

			p = p + sizeof(struct cmd_resp) + p_cmd_resp->data_len;
			p_cmd_resp = (struct cmd_resp *)p;

--------------------------------------------------------------------------------
handle_message(i, message):

--------------------------------------------------------------------------------
HAL		--		sensorhubd 		--	 driver





