diff --git a/drivers/mmc/fsl_esdhc.c b/drivers/mmc/fsl_esdhc.c
index 545c82a..1968389 100644
--- a/drivers/mmc/fsl_esdhc.c
+++ b/drivers/mmc/fsl_esdhc.c
@@ -20,6 +20,7 @@
 #include <fsl_esdhc.h>
 #include <fdt_support.h>
 #include <asm/io.h>
+#include <linux/math64.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -308,6 +309,8 @@ esdhc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
 	int	err = 0;
 	uint	xfertyp;
 	uint	irqstat;
+	loff_t len_read;
+	unsigned long time;
 	struct fsl_esdhc_cfg *cfg = mmc->priv;
 	volatile struct fsl_esdhc *regs = (struct fsl_esdhc *)cfg->esdhc_base;
 
@@ -358,6 +361,8 @@ esdhc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
 	esdhc_write32(&regs->mixctrl,
 	(esdhc_read32(&regs->mixctrl) & 0xFFFFFF80) | (xfertyp & 0x7F)
 			| (mmc->ddr_mode ? XFERTYP_DDREN : 0));
+	if (data)
+		time = get_timer(0);
 	esdhc_write32(&regs->xfertyp, xfertyp & 0xFFFF0000);
 #else
 	esdhc_write32(&regs->xfertyp, xfertyp);
@@ -446,6 +451,16 @@ esdhc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
 			}
 		} while ((irqstat & DATA_COMPLETE) != DATA_COMPLETE);
 
+		len_read = data->blocks * data->blocksize;
+		time = get_timer(time);
+		printf("###mn[%s]:%llu bytes read in %lu ms", __func__, len_read, time);
+		if (time > 0) {
+			puts(" (");
+			print_size(div_u64(len_read, time) * 1000, "/s");
+			puts(")");
+		}
+		puts("\n");
+
 		/*
 		 * Need invalidate the dcache here again to avoid any
 		 * cache-fill during the DMA operations such as the
