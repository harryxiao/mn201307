sensorhubd communicate with driver use sysfs
psh_ia_common.c
psh_ia_common.h
================================================================================
[1] the file nodes:
shell@cht_vr:/sys/class/hwmon/hwmon3 $ ls device/                              
control
counter
data
data_size
debug
driver
fw_version
hwmon
modalias
power
profile_pull_control
profile_pull_data
status_mask
status_trig
trace
uevent

--------------------------------------------------------------------------------
=>
相关属性文件的建立:
//hwmon/vr_sensor/psh_ia_common.c
(1)每个hwmon 设备都会有自己独有的属性，被 SENSOR_DEVICE_ATTR 声明为struct attribute结构体。
static SENSOR_DEVICE_ATTR(status_mask, S_IRUSR | S_IWUSR,
                          ia_get_status_mask, ia_set_status_mask, 0);
static SENSOR_DEVICE_ATTR(status_trig, S_IWUSR, NULL, ia_trig_get_status, 1);
static SENSOR_DEVICE_ATTR(debug, S_IRUSR | S_IWUSR,
                          ia_get_dbg_mask, ia_set_dbg_mask, 0);
static SENSOR_DEVICE_ATTR(control, S_IWUSR, NULL, ia_start_control, 1);
static SENSOR_DEVICE_ATTR(data_size, S_IRUSR, ia_read_data_size, NULL, 2);
static SENSOR_DEVICE_ATTR(counter, S_IWUSR | S_IRUSR, ia_get_counter,
                          ia_clear_counter, 0);


static struct bin_attribute bin_attr = {
	.attr = { .name = "data", .mode = S_IRUSR },
	.read = ia_read_data
};
static struct bin_attribute dbg_attr = {
	.attr = { .name = "trace", .mode = S_IRUSR },
	.read = ia_read_debug_data
};

(2) sysfs_create_files() create sysfs attribute file

static int create_sysfs_interface(struct device* dev)
{
    int ret_value;

    /*text part*/
	ret_value = sysfs_create_file(&dev->kobj,
                            &sensor_dev_attr_status_mask.dev_attr.attr);
   	ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_status_trig.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_debug.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_control.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_data_size.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_counter.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_fw_version.dev_attr.attr);

    /*binary part*/
    ret_value += sysfs_create_bin_file(&dev->kobj, &bin_attr);
    ret_value += sysfs_create_bin_file(&dev->kobj, &dbg_attr);

    return ret_value;
}
================================================================================
control:

ssize_t ia_start_control(struct device *dev,
			struct device_attribute *attr,
			const char *str, size_t count)
{
|-- struct psh_ia_priv *psh_ia_data =
			(struct psh_ia_priv *)dev_get_drvdata(dev);
|-- struct ia_cmd cmd_user = { 0 };
	u8 *ptr = (u8 *)&cmd_user;
	char *s;
	long val;
	int token = 0;
	int ret;
|-- while (*str && (token < sizeof(cmd_user))) {
		val = trans_strtol(str, &s, 0);
		if (str == s) {
			str++;
			continue;
		}
		str = s;
		*ptr++ = (u8)val; //cmd_user
		token++;
	}

|-- ret = ia_send_cmd(psh_ia_data, &cmd_user, token, SEND_ASYNC);
}



(1)parse the incoming --------> ia_cmd(four bytes)    ----------------+         
	  parameter str             +--------------------------------+    |
								| u8 tran_id;                    |    |
								+--------------------------------+    |
								| u8 cmd_id;                     |    |
								+--------------------------------+    |
								| u8 sensor_id;                  |    |
								+--------------------------------+    |
								| char param[CMD_PARAM_MAX_SIZE];|    |
								+--------------------------------+    |
																	  |
																	  |
																	  |
				  +------------frame_ia_cmd                           |
				  |           +-----------------------+               |
				  |       +---+-struct frame_head fh; |               |store ia_cmd
				  |       |   | struct ia_cmd data; <-+---------------+
				  |       |   +-----------------------+ 
				  |       |                           
				  |       |
				  |       +--> frame_head : initialize it with macro INIT_FRAME_HEAD
				  |           +-------------+
				  |           | u16 sign;   |
				  |           | u16 length; |
				  |           +-------------+
				  |
				  |
				  |         send_list_entry --------------------------+
				  |       +--------------------------------+          |
				  |       | struct list_head list_entry;   |          |
				  |       |                                |          |
				  |       | #define MAX_SEND_DATA_SIZE 256 |          |
				  +-------+>u8 data[MAX_SEND_DATA_SIZE];   |          |
						  | int used_size;                 |          |
						  | int debug_index;               |          |
						  +--------------------------------+          |
                                                                      v
                                                            add new to tail of the list 
                                                             psh_ext_if
                                                           +----------------------------------+
                                                           | ...                              |
                                                           | struct send_list send_data_list; |
                                                           | ...                              |
                                                           +----------------------------------+






--------------------------------------------------------------------------------
int ia_send_cmd(struct psh_ia_priv *psh_ia_data,
                struct ia_cmd *cmd, int len,
                int mode)
{
|-- mutex_lock(&psh_ia_data->cmd_mutex);
|-- if (cmd->cmd_id == CMD_RESET) {
		cmd->tran_id = 0;
		ia_circ_reset_off(&psh_ia_data->circ);
	}
|-- if (CMD_CFG_STREAM == cmd->cmd_id) {
        if (cmd->sensor_id < 256)
            g_stream_sensor_array[cmd->sensor_id] = FALSE;
    }
|-- cmd_ack.cmd_id = cmd->cmd_id;
	psh_ia_data->cmd_ack = &cmd_ack;

	psh_ia_data->cmd_in_progress = cmd->cmd_id;
|-- if (likely(SEND_ASYNC == mode)) {
        ret = process_send_cmd(psh_ia_data, PSH2IA_CHANNEL0,
                               cmd, len);
    } else {
        ret = process_send_cmd_sync(psh_ia_data, PSH2IA_CHANNEL0,
                                    cmd, len);
    }
|-- psh_ia_data->cmd_in_progress = CMD_INVALID;
|-- if (ret)
		goto f_out;
|-- f_out:
		psh_ia_data->cmd_ack = NULL;
		mutex_unlock(&psh_ia_data->cmd_mutex);
		return ret;

}
----------------------------------------
/* The len is actual cmd size include parameter sizes*/
int process_send_cmd(struct psh_ia_priv *ia_data,
			int ch, struct ia_cmd *cmd, int len)
{
|-- struct psh_ext_if *psh_if_info =
			(struct psh_ext_if *)ia_data->platform_priv;
    struct send_list_entry* lp_new_entry = NULL;

|-- lp_new_entry = build_send_list_entry(cmd, len);
|-- pm_runtime_get_sync(&psh_if_info->pshc->dev);
|-- insert_send_data_entry_to_list(psh_if_info, lp_new_entry);
|-- pm_runtime_mark_last_busy(&psh_if_info->pshc->dev);
	pm_runtime_put_autosuspend(&psh_if_info->pshc->dev);

}
--------------------
struct send_list_entry*  build_send_list_entry(void* lp_buffer, int buffer_size)
{
|-- struct send_list_entry* lp_new_entry = NULL;
    int total_size = buffer_size + SIZE_OF_FRAME_HEAD;

    if (!lp_buffer || total_size  > MAX_SEND_DATA_SIZE)
        return NULL;

|-- lp_new_entry = kzalloc(sizeof(struct send_list_entry), GFP_KERNEL);
|-- if (lp_new_entry) {
        build_transfer_buffer(lp_new_entry->data, lp_buffer, buffer_size);

        lp_new_entry->used_size = total_size;
        lp_new_entry->debug_index = 0;
    }

}
----------
static void build_transfer_buffer(void* lp_new_package_buffer, 
                                  void* lp_buffer, int buffer_size)
{
|-- struct frame_head* lp_fh = (struct frame_head*)lp_new_package_buffer;
    
|-- INIT_FRAME_HEAD(lp_fh, buffer_size);
    
|-- memcpy(lp_fh + 1, lp_buffer, buffer_size);

}

--------------------
void insert_send_data_entry_to_list(struct psh_ext_if* lp_psh_if_info,
                                    struct send_list_entry* lp_new_entry)
{
|-- mutex_lock(&lp_psh_if_info->send_data_list.lock);

|-- //add new to tail of the list
    list_add(&lp_new_entry->list_entry, lp_psh_if_info->send_data_list.head.prev);

|-- mutex_unlock(&lp_psh_if_info->send_data_list.lock);
}


================================================================================
data_size:
ssize_t ia_read_data_size(struct device *dev,
		struct device_attribute *attr, char *buf)
{
|--	struct psh_ia_priv *psh_ia_data = (struct psh_ia_priv *)dev_get_drvdata(dev);
|-- int avail = CIRC_CNT(psh_ia_data->circ.head,
				psh_ia_data->circ.tail, CIRC_SIZE); //Return count in buffer
|-- return snprintf(buf, PAGE_SIZE, "%d\n", avail);
}

get count in circ_buf, and output it to parameter buf
================================================================================


            struct psh_ext_if
           +-----------------------------+
           | ...                         |
           | struct psh_ia_priv* ia_data;+--+
           |                             |  |
           |                             |  |
           +-----------------------------+  |
                                            |
                                            |
                                            v
                                     psh_ia_priv
                                     +---------------------------------+
                                     | struct loop_buffer *lbuf;       |
                                     |                                 |
                            data <---+-struct circ_buf circ, circ_dbg; |
                                     |                                 |
                                     | ...                             |
                                     |                                 |
                                     | struct resp_cmd_ack *cmd_ack;   |
                                     | ...                             |
                                     | struct list_head sensor_list;   |
                                     | ...                             |
                                     +---------------------------------+


================================================================================




             psh_ext_if
            +----------------------------------+
            |...                               |
      +-----+-struct send_list send_data_list; |
      |     |...                               |
      |     +----------------------------------+
      |
      |
	  +---> send_list
           +-------------------------------------------+    
           | struct mutex lock;                        |
           |                                           |
           | /*each one is a send_list_entry*/         |
      +----+-struct list_head head;                    |
      |    |                                           |
      |    | struct spi_io_context low_spi_io_context; |
      |    +-------------------------------------------+
      |
      |
      +--> send_list_entry
           +------------------------------+
           | struct list_head list_entry; |
           |                              |
           | u8 data[MAX_SEND_DATA_SIZE]; |
           | int used_size;               |
           | int debug_index;             |
           +------------------------------+

================================================================================
data:
ssize_t ia_read_data(struct file *file, struct kobject *kobj,
			struct bin_attribute *attr, char *buf,
			loff_t off, size_t count)
{
	struct device *dev = container_of(kobj, struct device, kobj);
	struct psh_ia_priv *psh_ia_data =
			(struct psh_ia_priv *)dev_get_drvdata(dev);

	return ia_circ_get_data(&psh_ia_data->circ, buf, count);
}
--------------------------------------------------------------------------------
	copy to buf from psh_ia_data->circ
int ia_circ_get_data(struct circ_buf *circ, char *buf, u32 size)

