
================================================================================
dma_request_slave_channel_compat --> __dma_request_slave_channel_compat
--> __dma_request_channel --> private_candidate


static struct dma_chan *private_candidate(const dma_cap_mask_t *mask,
					  struct dma_device *dev,
					  dma_filter_fn fn, void *fn_param)
-- return an exclusive channel or NULL

(1)check mask capability
	capabilities that the channel must satisfy
	__dma_device_satisfies_mask(dev, mask) 

/* devices with multiple channels need special handling as we need to
 * ensure that all channels are either private or public.
 */

(2) exclude the channels publicly allocated 
 //@chancnt: how many DMA channels are supported

	if (dev->chancnt > 1 && !dma_has_cap(DMA_PRIVATE, dev->cap_mask))
		list_for_each_entry(chan, &dev->channels, device_node) {
			/* some channels are already publicly allocated */
			if (chan->client_count)
				return NULL;
		}
(3) exclude the used channels and filtered channels by dma_filter_fn
	list_for_each_entry(chan, &dev->channels, device_node) {
		if (chan->client_count)
			continue;
		if (fn && !fn(chan, fn_param))
			continue;
		return chan; //here got the satisfied channels
	}
(4) no satisfied channels, return 
	return chan;
--------------------------------------------------------------------------------
__dma_request_channel
-- try to allocate an exclusive channel
-- Find a channel from dma_device list

struct dma_chan *__dma_request_channel(const dma_cap_mask_t *mask,
				       dma_filter_fn fn, void *fn_param)
{
	/* Find a channel from dma_device list */
	list_for_each_entry_safe(device, _d, &dma_device_list, global_node) {
		chan = private_candidate(mask, device, fn, fn_param);
		if (chan) {
			/* Found a suitable channel, try to grab, prep, and
			 * return it.  We first set DMA_PRIVATE to disable
			 * balance_ref_count as this channel will not be
			 * published in the general-purpose allocator
			 */

			dma_cap_set(DMA_PRIVATE, device->cap_mask);
			device->privatecnt++;

			//try to grab a dma channel's parent driver module
			err = dma_chan_get(chan);

			if (err == -ENODEV) {
				pr_debug("%s: %s module removed\n",
					 __func__, dma_chan_name(chan));
				list_del_rcu(&device->global_node);
			} else if (err)
				pr_debug("%s: failed to get %s: (%d)\n",
					 __func__, dma_chan_name(chan), err);
			else
				break; //grab satisfied channel
			
			if (--device->privatecnt == 0)
				dma_cap_clear(DMA_PRIVATE, device->cap_mask);
			chan = NULL;
		}
	}

	return chan;
}



