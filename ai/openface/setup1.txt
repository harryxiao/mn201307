test pc: ubuntu 18.04
web addr: https://blog.csdn.net/weixinhum/article/details/77046873

Ubuntu 18.04+OpenFace的配置和简单人脸检测
=========================================

1.python
	Ubuntu 16.04桌面版自带python

2.git
	$ sudo apt-get install git

3.编译工具CMake
	$ sudo apt-get install cmake

4.C++标准库安装
	$ sudo apt-get install libboost-dev
	$ sudo apt-get install libboost-python-dev

5.下载OpenFace代码
	$ git clone https://github.com/cmusatyalab/openface.git

6.OpenCV安装
	$ sudo apt-get install libopencv-dev
	$ sudo apt-get install python-opencv

7.安装包管理工具pip
	$ sudo apt install python-pip

	更新pip,按上面安装不知道为什么是旧的版本，可能影响下面的操作

	$ pip install --upgrade pip

8.安装依赖的 PYTHON库
	$ cd openface
	$ sudo pip install -r requirements.txt
	$ sudo pip install dlib
	$ sudo pip install matplotlib


9.安装 luarocks—Lua 包管理器,提供一个命令行的方式来管理 Lua 包依赖、安装第三方 Lua 包等功能

	$ sudo apt-get install luarocks

10.安装 TORCH—科学计算框架，支持机器学习算法　

	$ git clone https://github.com/torch/distro.git ~/torch --recursive
	$ cd torch
	$ bash install-deps
	$ ./install.sh


使 torch7 设置的刚刚的环境变量生效
	$ source ~/.bashrc

	这里只安装了CPU版本，后面如果需要再更新CUDA的使用方法

11.安装依赖的 LUA库　

	$ luarocks install dpnn


下面的为选装，有些函数或方法可能会用到

	$ luarocks install image
	$ luarocks install nn
	$ luarocks install graphicsmagick
	$ luarocks install torchx
	$ luarocks install csvigo

12.编译OpenFace代码

	$ python setup.py build
	$ sudo python setup.py install


13.下载预训练后的数据

	$ sh models/get-models.sh
	$ wget https://storage.cmusatyalab.org/openface-models/nn4.v1.t7 -O models/openface/

————————-到此配置完成,下面是简单的例子————————-
compare.py（demo文件夹中）给出的示例检测两张脸的相近程度。

$ python demos/compare.py {3.jpg*,4.jpg*}


-----------------------------------
cp face_detect.py to openface/demos

issues:
issues1:
chris@iceberg:~/mn/openface[master]$ python demos/face_detect.py --image=images/examples/clapton-1.jpg
/home/chris/torch/install/bin/luajit: cannot open <models/openface/nn4.v1.t7> in mode r  at /home/chris/torch/pkg/torch/lib/TH/THDiskFile.c:673

=> fix:
openface/models/openface[master]$ cp nn4.small2.v1.t7 nn4.v1.t7

========================
第一步
在 openface 文件中建立一个名为 ./training-images/ 的文件夹。

mkdir training-images


第二步
为你想识别的每个人建立一个子文件夹。例如：

mkdir ./training-images/will-ferrell/
mkdir ./training-images/chad-smith/
mkdir ./training-images/jimmy-fallon/


第三步
将每个人的所有图像复制进对应的子文件夹。确保每张图像上只出现一张脸。不需要裁剪脸部周围的区域。OpenFace 会自己裁剪。
第四步
从 openface 的根目录中运行这个
openface 脚本。
首先，进行姿势检测和校准：

./util/align-dlib.py
./training-images/ align outerEyesAndNose ./aligned-images/ --size 96


这将创建一个名为./aligned-images/的子文件夹，里面是每一个测试图像裁剪过、并且对齐的版本。
其次，从对齐的图像中生成特征文件：

./batch-represent/main.lua
-outDir ./generated-embeddings/ -data ./aligned-images/

运行完后，这个./generated-embeddings/子文件夹会包含一个带有每张图像嵌入的 csv 文件。
第三，训练你的面部检测模型：

./demos/classifier.py
train ./generated-embeddings/

这将生成一个名为 ./generated-embeddings/classifier.pkl的新文件，其中包含了你用来识别新面孔的 SVM 模型。
到这一步为止，你应该有了一个可用的人脸识别器！
第五步：识别面孔！
获取一个未知脸孔的新照片，然后像这样把它传递入分类器脚本中：

./demos/classifier.py
infer ./generated-embeddings/classifier.pkl your_test_image.jpg

你应该会得到像这样的一个预测：

===/test-images/will-ferrel-1.jpg ===
Predict will-ferrell with 0.73 confidence.

至此，你已经完成了一个预测了。你也可以修改./demos/classifier.py 这个 python 脚本，来让它匹配其他人的脸。
重要提示：

    如果你得到的结果不够理想，试着在第三步为每个人添加更多照片（特别是不同姿势的照片）。
    即使完全不知道这个面孔是谁，现在这个脚本仍然会给出预测。在真实应用中，低可信度（low confidence）的预测可能会被直接舍弃，因为很有可能它们就是错的。
