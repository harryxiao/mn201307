sensor HAL

================================================================================
class hierarchy:

class Sensor 	//Sensor.hpp
|-- class PSHSensor		//PSHSensor.hpp
	|-- class PSHCommonSensor 	//PSHCommonSensor.hpp

================================================================================
//SensorHAL.cpp
static struct hw_module_methods_t sensors_module_methods = {
open: open,
};

static int open(const struct hw_module_t* module, const char* id,
		struct hw_device_t** device)
	|--	(1) *device = &dev.common;
	|-- (2) initSensors()
			|--	size = mConfig.size();
				mModule.sensors.reserve(size);
			|
			|-- for (unsigned int i = 0; i < size; i++) {
				|-- if (!mConfig.getSensorDevice(i, mDevice))
				|-- if (mDevice.getCategory() == LIBSENSORHUB) { //how to know category
					|-- switch (mDevice.getType()) {
						|-- case SENSOR_TYPE_ACCELEROMETER:
							case SENSOR_TYPE_MAGNETIC_FIELD:
							case SENSOR_TYPE_GYROSCOPE:
							case SENSOR_TYPE_ROTATION_MATRIX:
							case SENSOR_TYPE_ACC_RAW:
							case SENSOR_TYPE_GYRO_RAW:
							case SENSOR_TYPE_COMPS_RAW:
							...

								mSensor = new PSHCommonSensor(mDevice);
								break;
				|
				|-- if (mSensor) {
					|-- if (mSensor->selftest()) {
						|-- mSensor->getDevice().setId(newId);
                            mSensor->getDevice().setHandle(SensorDevice::idToHandle(newId));
                            mSensor->resetEventHandle();
                            mModule.sensors.push_back(mSensor);
                            newId++;
					|-- mSensor = NULL;

			|-- mModule.count = mModule.sensors.size();
				mModule.list = new sensor_t[mModule.count];
			|-- for (int i = 0; i < mModule.count; i++) {
					mModule.sensors[i]->getDevice().copyItem(mModule.list + i);
				}
			|-- mModule.pollfds = new struct pollfd[mModule.count];
				for (int i = 0; i < mModule.count; i++) {
						mModule.pollfds[i].fd = mModule.sensors[i]->getPollfd();
						mModule.pollfds[i].events = POLLIN;
						mModule.pollfds[i].revents = 0;
				}

--------------------------------------------------------------------------------

new PSHCommonSensor(mDevice);
	|-- PSHCommonSensor(SensorDevice &mDevice) :PSHSensor(mDevice)
		|-- PSHSensor::PSHSensor(SensorDevice &mDevice)
					:Sensor(mDevice), sensorHandle(NULL) //PSHSensor.cpp
			|-- SensorHubMethodsInitialize();
				|-- use dlopen to open libsensorhub.so, and return the handle
					methodsHandle = dlopen("libsensorhub.so", RTLD_LAZY);
				|-- use dlsym to the address where that symbol is loaded into memory.

					methods.psh_open_session = reinterpret_cast<handle_t (*)
						(psh_sensor_t)>(dlsym(methodsHandle, "psh_open_session"));
					methods.psh_get_fd
					methods.psh_close_session
					methods.psh_start_streaming
					methods.psh_start_streaming_with_flag
					methods.psh_stop_streaming
					methods.psh_set_property
					methods.psh_set_property_with_size
					methods.psh_flush_streaming
					methods.psh_set_calibration
					methods.psh_get_calibration

----------
note: struct sensor_hub_methods PSHSensor::methods;

Sensor::Sensor(SensorDevice &mDevice) // in Sensor class, //Sensor.cpp










