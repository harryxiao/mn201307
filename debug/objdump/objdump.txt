objdump

********************************************************************************
trust zone

out/target/product/bxtp_abl/obj/trusty/build-sand-x86-64/lk.elf
objdump -D lk.elf > asm.txt

********************************************************************************
kernel panic

根据异常栈通常即可定位出代码出错的大概位置，但有时需要使用反汇编工具定位异常.

反汇编工具存在于:
arm:
	prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/
x86:
	prebuilts/gcc/linux-x86/x86/x86_64-linux-android-4.9/bin/

1) 反汇编内核镜像，根据oops打印出的 PC 搜索在哪里出错:
	prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-objdump -D vmlinux > asm.txt


2) 根据地址指出在哪个文件的哪一行出错：
	prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-addr2line -a  要查询的地址  -e vmlinux

********************************************************************************

(1) 在linux内核代码根目录的 Makefile 中增加-g编译参数：
	KBUILD_CFLAGS   := -g -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs \
					   -fno-strict-aliasing -fno-common \
					   -Werror-implicit-function-declaration \
					   -Wno-format-security \
					   -fno-delete-null-pointer-checks

	修改Makefile后，重新编译内核，生成的 vmlinux 就会包含原来的代码信息，文件的大小也比原来大一倍！


(2) arm-none-eabi-objdump -Dz -S vmlinux > linux.dump

	-S 表示尽可能把原来的代码和反汇编出来的代码一起呈现出来，
	-S 参数需要结合 arm-linux-gcc 编译参数-g，才能达到反汇编时同时输出原来的代码。

