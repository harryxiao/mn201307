

system/core/rootdir/init.rc
on early-init
    # Set init and its forked children's oom_adj.
    write /proc/1/oom_score_adj -1000

    # Disable sysrq from keyboard
    write /proc/sys/kernel/sysrq 0

    # Set the security context of /adb_keys if present.
    restorecon /adb_keys

    # Shouldn't be necessary, but sdcard won't start without it. http://b/22568628.
    mkdir /mnt 0775 root system

    # Set the security context of /postinstall if present.
    restorecon /postinstall

    start ueventd
...

## Daemon processes to be run by init.
##
service ueventd /sbin/ueventd
    class core
    critical
    seclabel u:r:ueventd:s0


============================
init进程创建子进程ueventd，并将创建设备节点文件的工作托付给ueventd。

ueventd通过两种方式创建设备节点文件。
第一种方式对应“冷插拔”（Cold Plug），即以预先定义的设备信息为基础，当ueventd
启动后，统一创建设备节点文件。 这一类设备节点文件也被称为静态节点文件。

第二种方式对应“热插拔”（Hot Plug），即在系统运行中，当有设备插入USB端口时，
ueventd就会接收到这一事件，为插入的设备动态创建设备节点文件。这一类设备节点
文件也被称为动态节点文件。


在Linux内核2.6版本之前，用户必须直接创建设备节点文件。创建时，必须保证设备
文件的主次设备号不发生重叠，再通过mknod进行实际地创建。这样做的缺点是，用户
必须记住各个设备的主设备号和次设备号，还要避免设备号之间发生冲突，操作起来较为麻烦。
为了弥补这一不足，从内核2.6x开始引入udev(userspace device)，udev以守护进程的形
式运行。当设备驱动被加载时，它会掌握主设备号、次设备号，以及设备类型，而后
在“/dev”目录下自动创建设备节点文件。 


从加载设备驱动到udev创建设备节点文件的整个过程如下图所示：



       +-----------------+       (3) 比较 uevent 信息与注册在 “/sys” 中的设备信息 
       |      udev       +----------------------------------------------+
	   |	守护进程     +-------------+                                |
       +-----------------+             |(4) 创建设备节点文件            |
                ^                      v                                v
                |                 +---------+                     +-----------+
	    (2) 发生 uevent           | "/dev"  |                     |   "/sys"  |
                |                 +---------+                     +-----------+
                |                                                       ^      
                |                                                       | 
      +---------+----------+                                            | 
	  | 驱动程序初始化函数 +--------------------------------------------+ 
      +--------------------+            (1) 注册驱动信息



                                                               	

在系统运行中，若某个设备被插入，内核就会加载与该设备相关的驱动程序。
接着，驱动程序的启动函数probe将被调用（定义于设备驱动程序中，由内核自动调用，用来初始化设备），将主设备号、次设备号、设备类型保存到“/sys”文件系统中。
然后，驱动程序发送uevent给udev守护进程。
最后，udev通过分析内核发出的uevent，查看注册在/sys目录下的设备信息，以在/dev目录相应位置上创建节点文件。

II
uevent是内核向用户空间进程传递信息的信号系统，即在添加或删除设备时，内核使用uevent将设备信息传递到用户空间。uevent包含设备名称、类别、主设备号、次设备号、设备节点文件需要被创建的目录等信息。

III
系统内核启动后，udev进程运行在用户空间内，它无法处理内核启动过程中发生的uevent。虽然内核空间内的设备驱动程序可以正常运行，但由于未创建设备访问驱动所需的设备节点文件，将会出现应用程序无法使用相关设备的问题。
Linux系统中，通过冷插拔机制来解决该问题。当内核启动后，冷插拔机制启动udev守护进程，从/sys目录下读取实现注册好的设备信息，而后引发与各设备对应的uevent，创建设备节点。

总结一下：
热插拔时，设备连接后，内核调用驱动程序加载信息到/sys下，然后驱动程序发送uevent到udev；
冷插拔时，udev主动读取/sys目录下的信息，然后触发uevent给自己处理。之所以要有冷插拔，是因为内核加载部分驱动程序信息的时间，早于启动udev的时间。


Android8.0中的ueventd 
==================
Android.mk
# Create symlinks.
LOCAL_POST_INSTALL_CMD := $(hide) mkdir -p $(TARGET_ROOT_OUT)/sbin; \
    ln -sf ../init $(TARGET_ROOT_OUT)/sbin/ueventd; \
    ln -sf ../init $(TARGET_ROOT_OUT)/sbin/watchdogd



parse_line
|-> parse_new_section
	|-> parse_subsystem
		|-> ueventd_subsystem* s = ueventd_subsystem_find_by_name(args[1]); 
			//ignored duplicate definition of subsystem
		|-> list_add_tail(&subsystem_list, &s->slist);

static list_declare(subsystem_list);

device.cpp:
static list_declare(sys_perms);
static list_declare(dev_perms);
static list_declare(platform_names);

/dev/.coldboot_done	: coldboot done


s32v:
root@rda600:/sbin# chown 1000:1000 init


	  
	  
	  
