sensorhubd communicate with driver use sysfs
================================================================================
[1] the file nodes:
shell@cht_vr:/sys/class/hwmon/hwmon3 $ ls device/                              
control
counter
data
data_size
debug
driver
fw_version
hwmon
modalias
power
profile_pull_control
profile_pull_data
status_mask
status_trig
trace
uevent

--------------------------------------------------------------------------------
=>
相关属性文件的建立:
//hwmon/vr_sensor/psh_ia_common.c
(1)每个hwmon 设备都会有自己独有的属性，被 SENSOR_DEVICE_ATTR 声明为struct attribute结构体。
static SENSOR_DEVICE_ATTR(status_mask, S_IRUSR | S_IWUSR,
                          ia_get_status_mask, ia_set_status_mask, 0);
static SENSOR_DEVICE_ATTR(status_trig, S_IWUSR, NULL, ia_trig_get_status, 1);
static SENSOR_DEVICE_ATTR(debug, S_IRUSR | S_IWUSR,
                          ia_get_dbg_mask, ia_set_dbg_mask, 0);
static SENSOR_DEVICE_ATTR(control, S_IWUSR, NULL, ia_start_control, 1);
static SENSOR_DEVICE_ATTR(data_size, S_IRUSR, ia_read_data_size, NULL, 2);
static SENSOR_DEVICE_ATTR(counter, S_IWUSR | S_IRUSR, ia_get_counter,
                          ia_clear_counter, 0);


static struct bin_attribute bin_attr = {
	.attr = { .name = "data", .mode = S_IRUSR },
	.read = ia_read_data
};
static struct bin_attribute dbg_attr = {
	.attr = { .name = "trace", .mode = S_IRUSR },
	.read = ia_read_debug_data
};

(2) sysfs_create_files() create sysfs attribute file

static int create_sysfs_interface(struct device* dev)
{
    int ret_value;

    /*text part*/
	ret_value = sysfs_create_file(&dev->kobj,
                            &sensor_dev_attr_status_mask.dev_attr.attr);
   	ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_status_trig.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_debug.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_control.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_data_size.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_counter.dev_attr.attr);
    ret_value += sysfs_create_file(&dev->kobj,
                             &sensor_dev_attr_fw_version.dev_attr.attr);

    /*binary part*/
    ret_value += sysfs_create_bin_file(&dev->kobj, &bin_attr);
    ret_value += sysfs_create_bin_file(&dev->kobj, &dbg_attr);

    return ret_value;
}
