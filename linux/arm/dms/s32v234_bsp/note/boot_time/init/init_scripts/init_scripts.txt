Init scripts


Methodology
===========
There are multiple ways to reduce the time spent in init scripts
before starting the application:
  ▶ Start the application as soon as possible after only the strictly
    inecessary dependencies.
  ▶ Simplify shell scripts
  ▶ Start the application even before init


Measuring - bootchart
---------------------
If you want to have a more detailed look at the userland boot
sequence than with grabserial, you can use bootchart.

  ▶ You can use bootchartd from busybox
    (CONFIG_BOOTCHARTD=y)
  ▶ Boot your board passing init=/sbin/bootchartd on your
    kernel command line
  ▶ Copy /var/log/bootlog.tgz from your target to your host
  ▶ Generate the timechart:
    . .
    cd bootchart-<version>
    java -jar bootchart.jar bootlog.tgz
    bootchart is available at http://www.bootchart.org
	http://prdownloads.sourceforge.net/bootchart/bootchart-0.9.tar.bz2

reference:
https://elinux.org/Bootchart
https://github.com/xrmx/bootchart

Measuring - systemd
-------------------
If you are using systemd as your init program, you can use
systemd-analyze. See
http://www.freedesktop.org/software/systemd/man/systemdanalyze.html.
. .
$ systemd-analyze blame
6207ms udev-settle.service
735ms NetworkManager.service
642ms avahi-daemon.service
600ms abrtd.service
517ms rtkit-daemon.service
396ms dbus.service
390ms rpcidmapd.service
346ms systemd-tmpfiles-setup.service
316ms cups.service
310ms console-kit-log-system-start.service
309ms libvirtd.service
303ms rpcbind.service
298ms ksmtuned.service
281ms rpcgssd.service
277ms sshd.service
...

Initial measures
----------------
In the initial demo, we measure the time taken to get the login
prompt (RomBOOT is excluded).


Init
----
Starting as soon as possible after all the dependencies are started:
  ▶ Depends on your init program. Here we are assuming sysV
    init scripts.
  ▶ init scripts run in alphanumeric order and start with a letter
    (K for stop (kill) and S for start).
  ▶ You want to use the lowest number you can for your
    application.
  ▶ You can even replace init with your application!

How fast would we be if we could be the first started application?


Optimizing init scripts
-----------------------
▶ Start all your services directly from a single startup script (e.g.
  /etc/init.d/rcS). This eliminates multiple calls to /bin/sh.
▶ Replace udev with mdev. mdev is part of BusyBox. It is not
  running as a daemon and you can either run it only once or
  have it handling hotplug events.
▶ Remove udev (or mdev) if you just need it to create device
  files. Use devtmpfs (CONFIG_DEVTMPFS) instead,
  automatically managed by the kernel, and cheaper.

Reduce forking (1)
------------------
▶ fork/exec system calls are very expensive. Because of this,
calls to executables from shells are slow.
▶ Even an echo in a BusyBox shell results in a fork syscall!
▶ Select Shells -> Standalone shell in BusyBox
configuration to make the shell call applets whenever possible.
▶ Pipes and back-quotes are also implemented by fork/exec.
You can reduce their usage in scripts. Example:
. .
cat /proc/cpuinfo | grep model
Replace it with:
. .
grep model /proc/cpuinfo
See http://elinux.org/Optimize_RC_Scripts

Reduce forking (2)
------------------
Replaced:
. .
if [ $(expr match "$(cat /proc/cmdline)" '.* debug.*')\
-ne 0 -o -f /root/debug ]; then
DEBUG=1
By a much cheaper command running only one process:
. .
res=`grep " debug" /proc/cmdline`
if [ "$res" -o -f /root/debug ]; then
DEBUG=1
This only optimization allowed to save 87 ms on an ARM
AT91SAM9263 system (200 MHz)!

Reduce size (1)
---------------
▶ Strip your executables and libraries, removing ELF sections
only needed for development and debugging. The strip
command is provided by your cross-compiling toolchain.
BR2_STRIP_strip in Buildroot.
▶ superstrip: http:
//muppetlabs.com/~breadbox/software/elfkickers.html.
Goes beyond strip and can strip out a few more bits that are
not used by Linux to start an executable. BR2_STRIP_sstrip
in Buildroot.

Reduce size (2)
---------------
▶ use mklibs, available at
  http://packages.debian.org/sid/mklibs.
    ▶ mklibs produces cut-down shared libraries that contain only
      the routines required by a particular set of executables. Really
      useful with big libraries like OpenGL and QT. It even works
      without having the source code.
    ▶ Available in Yocto, but not in Buildroot (at least in 2013.11).
    ▶ Limitation: mklibs could remove dlopened libraries (loaded
      "manually" by applications) because it doesn't see them.

Practical lab - Reducing time in init-scripts
---------------------------------------------
▶ Regenerate the root filesystem with
Buildroot
▶ Use bootchart to measure boot
time

