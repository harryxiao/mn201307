sensor HAL

================================================================================
class hierarchy:

class Sensor 						//Sensor.hpp
|-- class PSHSensor					//PSHSensor.hpp
	|-- class PSHCommonSensor 		//PSHCommonSensor.hpp

----------
class SensorHubHelper				//SensorHubHelper.hpp

----------
class PlatformConfig				//PlatformConfig.hpp
important class members: 
	std::map<int, struct PlatformData> configs;
	std::vector<SensorDevice> devices; //devices vector similar to array

to parse XML file in the constructor,and will use default config 
-->
struct PlatformData					//ConfigData.hpp
----------
class SensorDevice 					//SensorDevice.hpp
important class members: 
	struct sensor_t dev;
	int id; //start from 0
	sensor_category_t category; // 1 for PSH sensor, 0 for direct sensor
	sensors_event_property_t eventProperty;
	sensors_subname subname;
	int mapper[4];
	float scale[4];

-----------
struct SensorModule {			//SensorHAL.cpp
        struct sensor_t* list;
        std::vector<Sensor*> sensors;
        struct pollfd *pollfds;
        int count;
};
================================================================================
//SensorHAL.cpp
static struct hw_module_methods_t sensors_module_methods = {
open: open,
};

static int open(const struct hw_module_t* module, const char* id,
		struct hw_device_t** device)
	|--	(1) *device = &dev.common;
	|-- (2) initSensors()
			|-- PlatformConfig mConfig; // creates an object, calling the default constructor
				SensorDevice mDevice;
				struct PlatformData mData;
				Sensor* mSensor = NULL;
			|--	size = mConfig.size();
				mModule.sensors.reserve(size);
			|
			|-- for (unsigned int i = 0; i < size; i++) {
				|-- if (!mConfig.getSensorDevice(i, mDevice))
				|-- if (mDevice.getCategory() == LIBSENSORHUB) { //how to know category
					|-- switch (mDevice.getType()) {
						|-- case SENSOR_TYPE_ACCELEROMETER:
							case SENSOR_TYPE_MAGNETIC_FIELD:
							case SENSOR_TYPE_GYROSCOPE:
							case SENSOR_TYPE_ROTATION_MATRIX:
							case SENSOR_TYPE_ACC_RAW:
							case SENSOR_TYPE_GYRO_RAW:
							case SENSOR_TYPE_COMPS_RAW:
							...

								mSensor = new PSHCommonSensor(mDevice);
								break;
				|
				|-- if (mSensor) {
					|-- if (mSensor->selftest()) {
						|-- mSensor->getDevice().setId(newId);
                            mSensor->getDevice().setHandle(SensorDevice::idToHandle(newId));
                            mSensor->resetEventHandle();
                            mModule.sensors.push_back(mSensor);
                            newId++;
					|-- mSensor = NULL;

			|-- mModule.count = mModule.sensors.size();
				mModule.list = new sensor_t[mModule.count];
			|-- for (int i = 0; i < mModule.count; i++) {
					mModule.sensors[i]->getDevice().copyItem(mModule.list + i);
				}
			|-- mModule.pollfds = new struct pollfd[mModule.count];
				for (int i = 0; i < mModule.count; i++) {
						mModule.pollfds[i].fd = mModule.sensors[i]->getPollfd();
						mModule.pollfds[i].events = POLLIN;
						mModule.pollfds[i].revents = 0;
				}

================================================================================

open()
|-- dev.activate       = sensorActivate;
	dev.setDelay       = sensorSetDelay;
	dev.poll           = sensorPoll;
	dev.batch          = sensorBatch;
	dev.flush          = sensorFlush;






--------------------------------------------------------------------------------

new PSHCommonSensor(mDevice);
	|-- PSHCommonSensor(SensorDevice &mDevice) :PSHSensor(mDevice)
		|-- PSHSensor::PSHSensor(SensorDevice &mDevice)
					:Sensor(mDevice), sensorHandle(NULL) //PSHSensor.cpp
			|-- SensorHubMethodsInitialize();
				|-- use dlopen to open libsensorhub.so, and return the handle
					methodsHandle = dlopen("libsensorhub.so", RTLD_LAZY);
				|-- use dlsym to get the address where that symbol is loaded into memory.

					methods.psh_open_session = reinterpret_cast<handle_t (*)
						(psh_sensor_t)>(dlsym(methodsHandle, "psh_open_session"));
					methods.psh_get_fd
					methods.psh_close_session
					methods.psh_start_streaming
					methods.psh_start_streaming_with_flag
					methods.psh_stop_streaming
					methods.psh_set_property
					methods.psh_set_property_with_size
					methods.psh_flush_streaming
					methods.psh_set_calibration
					methods.psh_get_calibration

----------
note: struct sensor_hub_methods PSHSensor::methods;

Sensor::Sensor(SensorDevice &mDevice) // in Sensor class, //Sensor.cpp


--------------------------------------------------------------------------------
the relationship of function calls:

open
|-- static bool initSensors()
	|-- int PSHCommonSensor::getPollfd()
		|-- psh_sensor_t PSHType = SensorHubHelper::
							getType(device.getType(), device.getSubname());
		|
		|--	sensorHandle = methods.psh_open_session(PSHType);
			pollfd = methods.psh_get_fd(sensorHandle);


methods.psh_close_session <- ~PSHCommonSensor()

methods.psh_start_streaming

PSHCommonSensor::hardwareSet()
|-- if (!activated) 
	|-- methods.psh_stop_streaming
|-- else
	|-- methods.psh_start_streaming_with_flag 

methods.psh_set_property


methods.psh_set_property_with_size
<-- SensorHubHelper::setPSHPropertyIfNeeded() 
<-- PSHCommonSensor::hardwareSet()
<-- PSHCommonSensor::batch()
<-- sensorBatch()
<-- open()
	|-- dev.batch          = sensorBatch;



methods.psh_flush_streaming
<-- int PSHSensor::flush(int handle)
<-- int sensorFlush(struct sensors_poll_device_1* dev, int handle)
<-- open()
	|-- dev.flush          = sensorFlush;


methods.psh_set_calibration
methods.psh_get_calibration

