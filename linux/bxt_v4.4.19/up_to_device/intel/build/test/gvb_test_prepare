#!/bin/bash
# Author : Leo Sartre <leox.sartre@intel.com>

export OPENSSL_CONF=${OPENSSL_CONF:-/etc/ssl/openssl.cnf}

ANDROID_BUILD_TOP=`readlink -f ${ANDROID_BUILD_TOP:-""}`
BOOT_SIGNER="boot_signer"
SIMG_DUMP="$ANDROID_BUILD_TOP/system/core/libsparse/simg_dump.py"
SCRIPT_ABS_NAME=`readlink -f $0`
UNSIGN_BOOT_TOOL=`dirname $SCRIPT_ABS_NAME`"/unsign_boot_img.py"

TMPDIR=${TMPDIR:-/tmp}
PREFIX="$TMPDIR/$USER"
IMG_DIR="$PREFIX/img"
TMP_DIR="$PREFIX/tmp"
VERITY_KEY_PAIR="$ANDROID_BUILD_TOP/build/target/product/security/verity"
IMG=""

KEYS_DIR="$PREFIX/keys"
USERKEY="$KEYS_DIR/userkey"
WD=`pwd`

function usage {
    echo "usage: `basename $0` [-b <boot_or_recovery_image_path> | -s <system_image_path> | -c | -h]"
    echo "       -c: clean everything"
    echo "       -b <image_path>: name of the boot/recovery image to split/sign"
    echo "       -s <image_path>: name of the system image to corrupt"
    echo "       -h: print this message"
    echo "example:"
    echo "        $0 -b ~/boot.img"
    exit 1
}

function create_dir {
    [ ! -d "$1" ] && mkdir -p "$1"
}

function generate_user_keys {
    if [ ! -e $USERKEY ]
    then
        cd $KEYS_DIR
        echo "Generating userkey and certificates."
        # generate userkey to sign bootimages
        openssl genpkey -out $USERKEY -algorithm rsa -pkeyopt rsa_keygen_bits:2048
        # extract DER pub key from the $USERKEY
        openssl rsa -in $USERKEY -pubout -outform DER -out $USERKEY.pub
        # generate the pk8
        openssl pkcs8 -in $USERKEY -topk8 -outform DER -out $USERKEY.pk8 -nocrypt
        # generate self-signed certificate
        openssl req -new -x509 -sha256 -key $USERKEY -out $USERKEY.x509.pem -days 10000 -batch
        # generate certificate request
        openssl req -new -key $USERKEY.pk8 -out $USERKEY.csr -keyform DER -batch
        # generate OEM signed user certificate
        openssl x509 -req -sha256 -days 10000 -in $USERKEY.csr -CA $VERITY_KEY_PAIR.x509.pem -CAkey $VERITY_KEY_PAIR.pk8 -CAkeyform DER -set_serial 01 -out $USERKEY.crt
        cd $WD
    else
        echo "Using existing user key and certificate, use -c if you want to force regenerating new ones."
    fi
}

function generate_corrupted_system_images {
    LIST_VERITY_IMGS=("verity_metadata.img" "verity.img")
    START_OFFSET=()
    TMP_VERITY_IMG="$TMP_DIR/tmp.img"
    i=0
    while read start length; do
        # use of tmp file but save us some unreliable arithmetic
        dd if=$TMP_DIR/$IMG.img of=$TMP_VERITY_IMG bs=$start skip=1 2>/dev/null
        dd if=$TMP_VERITY_IMG of=$TMP_DIR/${LIST_VERITY_IMGS[$i]} bs=$length count=1 2>/dev/null
        START_OFFSET[$i]=$start
        ((i++))
    done <<< "$($SIMG_DUMP -v $TMP_DIR/$IMG.img | tail -3  | head -2 | awk '{print $2" "$3}')"

    for i in "${!LIST_VERITY_IMGS[@]}"
    do
        # by default corrupt the first block
        bs=4096
        count=1
        seek=0

        # make a copy to keep originals
        cp $TMP_DIR/${LIST_VERITY_IMGS[$i]} $TMP_DIR/corrupted_${LIST_VERITY_IMGS[$i]}
        if [ "${LIST_VERITY_IMGS[$i]}" = "verity_metadata.img" ]
        then
            # skip 8 first bytes to preserve 0xb001b001 magic number and padding
            # and introduce some random bytes
            bs=1
            count=42
            seek=8
        fi
        echo "Corrupting ${LIST_VERITY_IMGS[$i]}..."
        dd if=/dev/urandom bs=$bs count=$count conv=notrunc seek=$seek of=$TMP_DIR/corrupted_${LIST_VERITY_IMGS[$i]}

        echo "Creating system_corrupted_${LIST_VERITY_IMGS[$i]}..."
        cp $TMP_DIR/$IMG.img $IMG_DIR/system_corrupted_${LIST_VERITY_IMGS[$i]}
        dd if=$TMP_DIR/corrupted_${LIST_VERITY_IMGS[$i]} bs=${START_OFFSET[$i]} conv=notrunc seek=1 of=$IMG_DIR/system_corrupted_${LIST_VERITY_IMGS[$i]}
    done

    # corrupt bootanimation binary
    echo "Corrupting bootanimation binary..."
    strings $TMP_DIR/$IMG.img | grep -m 1 "SurfaceFlinger died" &>/dev/null
    if [ $? -ne 0 ]
    then
        echo "'SurfaceFlinger died' cannot be found in $TMP_DIR/$IMG.img, please find an other string to modify..."
        exit 1
    fi
    cp $TMP_DIR/$IMG.img $IMG_DIR/system_corrupted_block.img
    sed -i 's/SurfaceFlinger died/FlingerSurface died/' $IMG_DIR/system_corrupted_block.img
}

function generate_corrupted_boot_images {
    echo "Unsigning $IMG image."
    $UNSIGN_BOOT_TOOL $TMP_DIR/$IMG.img > $TMP_DIR/unsigned_$IMG.img

    echo "Generating $IMG image signed with oem key."
    $BOOT_SIGNER /$IMG $TMP_DIR/unsigned_$IMG.img $VERITY_KEY_PAIR.pk8 $VERITY_KEY_PAIR.x509.pem $TMP_DIR/oem_signed_$IMG.img
    echo "Corrupting a copy of $IMG image signed with oem key."
    cp $TMP_DIR/oem_signed_$IMG.img $TMP_DIR/oem_signed_corrupted_$IMG.img
    sed -i 's/loglevel=./loglevel=9/' $TMP_DIR/oem_signed_corrupted_$IMG.img
    echo "Corrupting the signature of a copy of $IMG image signed with oem key."
    cp $TMP_DIR/oem_signed_$IMG.img $TMP_DIR/oem_signed_corrupted_signature_$IMG.img
    # replaces 8 bytes in the signature
    du -b $TMP_DIR/unsigned_$IMG.img | while read size image; do dd if=/dev/urandom bs=1 count=8 conv=notrunc seek=$size of=$TMP_DIR/oem_signed_corrupted_signature_$IMG.img; done

    if [ -e $USERKEY.pk8 ]
    then
        echo "Generating $IMG image signed with userkey key."
        $BOOT_SIGNER /$IMG $TMP_DIR/unsigned_$IMG.img $USERKEY.pk8 $USERKEY.x509.pem $TMP_DIR/user_signed_$IMG.img
        echo "Corrupting a copy of $IMG image signed with userkey."
        cp $TMP_DIR/user_signed_$IMG.img $TMP_DIR/user_signed_corrupted_$IMG.img
        sed -i 's/loglevel=./loglevel=9/' $TMP_DIR/user_signed_corrupted_$IMG.img
        echo "Generating $IMG image signed with signed user certificate."
        $BOOT_SIGNER /$IMG $TMP_DIR/unsigned_$IMG.img $USERKEY.pk8 $USERKEY.crt $TMP_DIR/user_verified_signed_$IMG.img
    fi

    echo "Moving images into $IMG_DIR/"
    mv $TMP_DIR/oem_signed_$IMG.img $IMG_DIR
    mv $TMP_DIR/oem_signed_corrupted_$IMG.img $IMG_DIR
    mv $TMP_DIR/oem_signed_corrupted_signature_$IMG.img $IMG_DIR
    mv $TMP_DIR/unsigned_$IMG.img $IMG_DIR
    if [ -e $USERKEY.pk8 ]
    then
        mv $TMP_DIR/user_signed_$IMG.img $IMG_DIR
        mv $TMP_DIR/user_signed_corrupted_$IMG.img $IMG_DIR
        mv $TMP_DIR/user_verified_signed_$IMG.img $IMG_DIR
    fi
}

while getopts "b:chs:" opt; do
    case $opt in
        h)
            usage
            ;;
        b)
            IMG=`strings $OPTARG | grep -e '/boot$'`
            if [ "X$IMG" = "X" ]
            then
                IMG=`strings $OPTARG | grep -e '/recovery$'`
            fi
            if [ "X$IMG" = "X" ]
            then
                echo "error! $OPTARG is neither detected as /boot or as /recovery image"
                exit 1
            fi
            IMG=`echo $IMG | sed 's_/__'`
            create_dir $TMP_DIR
            cp $OPTARG $TMP_DIR/$IMG.img
            ;;
        s)
            IMG="system"
            size=$(du -BM $OPTARG | awk '{print $1}')
            echo "Warning, this operation will consume 4 * $size on your disk"
            echo "Would you like to continue? [y/N]"
            read v
            case "$v" in
                "y" | "Y" | "yes")
                    ;;
                *)
                    echo "Aborted!"
                    exit 1
                    ;;
            esac
            echo "Copying $OPTARG..."
            create_dir $TMP_DIR
            cp $OPTARG $TMP_DIR/$IMG.img
            ;;
        c)
            echo "Cleaning $TMP_DIR, $IMG_DIR, $KEYS_DIR..."
            rm -rf $TMP_DIR
            rm -rf $IMG_DIR
            rm -rf $KEYS_DIR
            exit 1
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            usage
            ;;
    esac
done

# Make sure all varables are defined
if [ "X$ANDROID_BUILD_TOP" = "X" ]
then
    echo "Please source build/envsetup.sh and lunch with the appropriate target prior to use this script."
    usage
fi

if [ ! -e $TMP_DIR/$IMG.img ]
then
    echo "Image $TMP_DIR/$IMG.img not found, did you forgot -b or -s option?"
    usage
fi

# Main
create_dir $IMG_DIR

if [ "$IMG" = "system" ]
then
    generate_corrupted_system_images
else
    create_dir $KEYS_DIR
    generate_user_keys
    generate_corrupted_boot_images
fi

echo "Computing md5sum of images."
md5sum $IMG_DIR/*.img > $IMG_DIR/checksum.md5
echo "Your images are available in $IMG_DIR/"
