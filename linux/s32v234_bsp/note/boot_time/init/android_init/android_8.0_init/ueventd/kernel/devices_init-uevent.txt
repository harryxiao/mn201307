uevent_in_driver_init
=====================

//init/main.c
asmlinkage __visible void __init start_kernel(void)
{
	...
	/* Do the rest non-__init'ed, we're now alive */
	rest_init();
}

static noinline void __init_refok rest_init(void)
{
	...
	kernel_thread(kernel_init, NULL, CLONE_FS);
	...
}

static int __ref kernel_init(void *unused)
{
	kernel_init_freeable();
	...
}

static noinline void __init kernel_init_freeable(void)
{
	...
	do_basic_setup();
	...
}

//init/main.c

/*
 * Ok, the machine is now initialized. None of the devices
 * have been touched yet, but the CPU subsystem is up and
 * running, and memory and process management works.
 *
 * Now we can finally start doing some real work..
 */
static void __init do_basic_setup(void)
{
	...
	driver_init();
	...
}

//drivers/base/init.c
/**
 * driver_init - initialize driver model.
 *
 * Call the driver model init functions to initialize their
 * subsystems. Called early from init/main.c.
 */

void __init driver_init(void)
{
	...
	devices_init();
	buses_init();
	classes_init();
	...
}



========================================

                +---------------+
                | start_kernel  |
                |               |
                |               |
                | +-----------+ |
                | | rest_init | |
                | +-----|-----+ |
                +-------|-------+
                        |
                        | kernel_thread
                        v
             +--------------------------+
             |	    kernel_init         |
             |                          |
             |                          |
             | +----------------------+ |
             | | kernel_init_freeable | |
             | |                      | |
             | | +------------------+ | |
             | | |  do_basic_setup  | | |
             | | |                  | | |
             | | |                  | | |
             | | | +-------------+  | | |
             | | | | driver_init |  | | |
             | | | +-------------+  | | |
             | | +------------------+ | |
             | +----------------------+ |
             +---------------------------+


devices_init();
===============
drivers/base/core.c - core driver model code (device registration, etc)

// drivers/base/core.c - core driver model code (device registration, etc)
static const struct kset_uevent_ops device_uevent_ops = {  [drivers/base/core.c]
	.filter =	dev_uevent_filter,
	.name =		dev_uevent_name,
	.uevent =	dev_uevent,
};


devices_init [drivers/base/core.c]
(1) devices_kset = kset_create_and_add("devices", &device_uevent_ops, NULL);
(2) dev_kobj = kobject_create_and_add("dev", NULL);
(3) sysfs_dev_block_kobj = kobject_create_and_add("block", dev_kobj);
(4) sysfs_dev_char_kobj = kobject_create_and_add("char", dev_kobj);

(1)kset_create_and_add
-----------------------
kset_create_and_add - create a struct kset dynamically and add it to sysfs
This function creates a kset structure dynamically and registers it
with sysfs.  

/sys/devices/ will be created.

ps:
/sys/class/
|-- block
|   |-- loop0 -> ../../devices/virtual/block/loop0
...
|-- input
|   |-- event0 -> ../../devices/LNXSYSTM:00/LNXPWRBN:00/input/input0/event0
...

kset_create_and_add
<1> kset = kset_create(name, uevent_ops, parent_kobj);
<2> error = kset_register(kset);

<1>kset_create
--------------
kset_create - create a struct kset dynamically
a.  kset = kzalloc(sizeof(*kset), GFP_KERNEL);
b.  retval = kobject_set_name(&kset->kobj, "%s", name); //init kset->kobj.name
	kset->uevent_ops = uevent_ops;
	kset->kobj.parent = parent_kobj;
	kset->kobj.ktype = &kset_ktype;
	kset->kobj.kset = NULL;

<2>kset_register
----------------
kset_register - initialize and add a kset.
a. kset_init(k); //initialize a kset for use
b. err = kobject_add_internal(&k->kobj);
	(a) kobj_kset_join(kobj);
		kobj->parent = parent;
		// add the kobject to its kset's list
		// set kobj->parent
	(b) error = create_dir(kobj);
	(c) kobj->state_in_sysfs = 1;
c.  kobject_uevent(&k->kobj, KOBJ_ADD); // notify userspace by sending an uevent
	|-> return kobject_uevent_env(kobj, action, NULL);

(b)create_dir
------------
//todo


kobject_uevent_env
------------------
- send an uevent with environmental data

int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
		       char *envp_ext[])
{
(1)
	/* search the kset we belong to */
	top_kobj = kobj;
	while (!top_kobj->kset && top_kobj->parent)
		top_kobj = top_kobj->parent;

	kset = top_kobj->kset;
	uevent_ops = kset->uevent_ops;

(2) skip some event
	/* skip the event, if uevent_suppress is set*/
	if (kobj->uevent_suppress) {
		return 0;
	}

	/* skip the event, if the filter returns zero. */
	if (uevent_ops && uevent_ops->filter)
		if (!uevent_ops->filter(kset, kobj)) {
			return 0;
		}

(3) /* originating subsystem */
	if (uevent_ops && uevent_ops->name)
		subsystem = uevent_ops->name(kset, kobj);
	else
		subsystem = kobject_name(&kset->kobj);

(4) add uevent variable : ACTION, DEVPATH, SUBSYSTEM, keys, and call
	the kset specific function to add its stuff like "MAJOR", "MINOR",
	"DEVNAME"..., and it will call bus/class/device type specific function to
	add its stuff.

	/* environment buffer */
	env = kzalloc(sizeof(struct kobj_uevent_env), GFP_KERNEL);

	/* complete object path */
	devpath = kobject_get_path(kobj, GFP_KERNEL);
	// generate and return the path associated with a given kobj and kset pair.

	/* default keys */
	retval = add_uevent_var(env, "ACTION=%s", action_string);

	retval = add_uevent_var(env, "DEVPATH=%s", devpath);

	retval = add_uevent_var(env, "SUBSYSTEM=%s", subsystem);

	/* keys passed in from the caller */
	if (envp_ext) {
		for (i = 0; envp_ext[i]; i++) {
			retval = add_uevent_var(env, "%s", envp_ext[i]);
			if (retval)
				goto exit;
		}
	}

	/* let the kset specific function add its stuff */
	if (uevent_ops && uevent_ops->uevent) {
		retval = uevent_ops->uevent(kset, kobj, env); //see (ps1)
		if (retval) {
			goto exit;
		}
	}

(5) /*
	 * Mark "add" and "remove" events in the object to ensure proper
	 * events to userspace during automatic cleanup. If the object did
	 * send an "add" event, "remove" will automatically generated by
	 * the core, if not already done by the caller.
	 */
	if (action == KOBJ_ADD)
		kobj->state_add_uevent_sent = 1;
	else if (action == KOBJ_REMOVE)
		kobj->state_remove_uevent_sent = 1;

(6)
	mutex_lock(&uevent_sock_mutex);
	/* we will send an event, so request a new sequence number */
	retval = add_uevent_var(env, "SEQNUM=%llu", (unsigned long long)++uevent_seqnum);

(6-A) send netlink message: see uevent_send_netlink_massage.txt
#if defined(CONFIG_NET)

#endif
	mutex_unlock(&uevent_sock_mutex);

(6-B) //todo in another file: uevent_helper.txt
#ifdef CONFIG_UEVENT_HELPER
	/* call uevent_helper, usually only enabled during early boot */
#endif


}

(ps1):
struct kset_uevent_ops
-----------------------
[drivers/base/core.c]
static const struct kset_uevent_ops device_uevent_ops = {
	.filter =	dev_uevent_filter,
	.name =		dev_uevent_name,
	.uevent =	dev_uevent,
};

devices_init
{
	devices_kset = kset_create_and_add("devices", &device_uevent_ops, NULL);
	...
}

uevent_ops->uevent(kset, kobj, env);
<=> [drivers/base/core.c]
static int dev_uevent(struct kset *kset, struct kobject *kobj,
		      struct kobj_uevent_env *env)
{
(1) /* add device node properties if present */
		add_uevent_var(env, "MAJOR=%u", MAJOR(dev->devt));
		add_uevent_var(env, "MINOR=%u", MINOR(dev->devt));

		name = device_get_devnode(dev, &mode, &uid, &gid, &tmp);
		if (name) {
			add_uevent_var(env, "DEVNAME=%s", name);
			add_uevent_var(env, "DEVMODE=%#o", mode & 0777);
			add_uevent_var(env, "DEVUID=%u", from_kuid(&init_user_ns, uid));
			add_uevent_var(env, "DEVGID=%u", from_kgid(&init_user_ns, gid));
			kfree(tmp);
		}
(2)
	if (dev->type && dev->type->name)
		add_uevent_var(env, "DEVTYPE=%s", dev->type->name);

	if (dev->driver)
		add_uevent_var(env, "DRIVER=%s", dev->driver->name);

	/* Add common DT information about the device */
	of_device_uevent(dev, env);

(3) 
	/* have the bus specific function add its stuff */
	if (dev->bus && dev->bus->uevent) {
		retval = dev->bus->uevent(dev, env); //todo
	}

(4) /* have the class specific function add its stuff */
	if (dev->class && dev->class->dev_uevent) {
		retval = dev->class->dev_uevent(dev, env); //todo
	}

(5) /* have the device type specific function add its stuff */
	if (dev->type && dev->type->uevent) {
		retval = dev->type->uevent(dev, env);
	}


}




uevent_show/sotre
------------------
[drivers/base/core.c]
//todo
