From 2c52e64f30df86417f3d5dfc70ed885ade0fed20 Mon Sep 17 00:00:00 2001
From: nma1x <ningx.ma@intel.com>
Date: Thu, 13 Apr 2017 14:05:30 +0800
Subject: [PATCH] [test][dma attack] Add security test

dma attack lk heap:
    ./tipc-test32 -t security-test

dma attack vmm:
    ./tipc-test32 -t security-test3
Change-Id: I910fafa8c5c7999d0678a9685a4c19376aa307bc
---

diff --git a/trusty/libtrusty/tipc-test/tipc_test.c b/trusty/libtrusty/tipc-test/tipc_test.c
index b838f35..ee8aa0d 100644
--- a/trusty/libtrusty/tipc-test/tipc_test.c
+++ b/trusty/libtrusty/tipc-test/tipc_test.c
@@ -24,7 +24,14 @@
 
 #include <trusty/tipc.h>
 
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
 #define TIPC_DEFAULT_DEVNAME "/dev/trusty-ipc-dev0"
+
+static int security_test_check(void);
+static int security_test_free(void);
 
 static const char *dev_name = NULL;
 static const char *test_name = NULL;
@@ -38,6 +45,10 @@
 static const char *closer2_name = "com.android.ipc-unittest.srv.closer2";
 static const char *closer3_name = "com.android.ipc-unittest.srv.closer3";
 static const char *main_ctrl_name = "com.android.ipc-unittest.ctrl";
+
+static const char *security_test_name = "com.android.ipc-unittest.srv.security_test";
+static const char *security_test_check_name = "com.android.ipc-unittest.srv.security_test_check";
+static const char *security_test_free_name = "com.android.ipc-unittest.srv.security_test_free";
 
 static const char *_sopts = "hsvD:t:r:m:b:";
 static const struct option _lopts[] =  {
@@ -79,6 +90,10 @@
 "   closer3      - connection closed by remote (test3)\n"
 "   ta2ta-ipc    - execute TA to TA unittest\n"
 "   dev-uuid     - print device uuid\n"
+"   security-test	- dma attack lk heap, cmd='4'\n"
+"   security-test1	- g_test_noise->phy_addr\n"
+"   security-test2	- g_test_alloc->phy_addr\n"
+"   security-test3	- dma attack vmm\n"
 "   ta-access    - test ta-access flags\n"
 "\n"
 ;
@@ -661,6 +676,174 @@
 	return 0;
 }
 
+typedef struct security_test_mem {
+    uint64_t addr;
+    uint32_t size;
+} security_test_mem_t;
+
+
+int dma_attack1(char cmd)
+{
+	const char *bdl_hack = "/sys/bus/hdaudio/devices/ehdaudio0D2/bdl_hack";
+	int fd;
+	int ret;
+
+	fd = open(bdl_hack, O_RDWR, 0664);
+	if (fd < 0) {
+		printf("### failed to open %s\n", bdl_hack);
+		return -1;
+	}
+
+	ret = write(fd, &cmd, sizeof(cmd));
+	if (ret < 0) {
+		printf("### failed to write bdl_hack: ret = %d\n", ret);
+		close(fd);
+		return -1;
+	}
+
+	return 0;
+}
+
+int dma_attack(uint64_t lk_heap_phys_addr)
+{
+	const char *lk_phys_addr = "/sys/bus/hdaudio/devices/ehdaudio0D2/lk_phys_addr";
+	const char *bdl_hack = "/sys/bus/hdaudio/devices/ehdaudio0D2/bdl_hack";
+	int fd;
+	int ret;
+	char str[64];
+
+	sprintf(str,"%d", lk_heap_phys_addr);
+
+	fd = open(lk_phys_addr, O_RDWR, 0664);
+	if (fd < 0) {
+		printf("### failed to open %s\n", lk_phys_addr);
+		return -1;
+	}
+
+	ret = write(fd, str, sizeof(str));
+	if (ret < 0) {
+		printf("### failed to write lk_phys_addr(%s): ret = %d\n", str, ret);
+		close(fd);
+		return -1;
+	}
+
+	close(fd);
+	printf("### write phys addr(%s) to lk_security_alloc\n", str);
+
+	fd = open(bdl_hack, O_RDWR, 0664);
+	if (fd < 0) {
+		printf("### failed to open %s\n", bdl_hack);
+		return -1;
+	}
+
+	char cmd = '4';
+	ret = write(fd, &cmd, sizeof(cmd));
+	if (ret < 0) {
+		printf("### failed to write bdl_hack: ret = %d\n", ret);
+		close(fd);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int security_test(void)
+{
+	int fd;
+	ssize_t rc;
+	security_test_mem_t lk_security_alloc;
+
+	fd = tipc_connect(dev_name, security_test_name);
+	if (fd < 0) {
+		fprintf(stderr, "Failed to connect to '%s' service\n",
+			"security_test");
+		return fd;
+	}
+
+	/* wait for test to complete */
+	rc = read(fd, &lk_security_alloc.addr, sizeof(lk_security_alloc.addr));
+	if (rc < 0) {
+		perror("security_test: read");
+	} else if (rc != sizeof(lk_security_alloc.addr)) {
+		fprintf(stderr, "unexpected lk_security_alloc.addr size (%d vs. %d)\n",
+			(int)rc, (int)sizeof(lk_security_alloc.addr));
+	} else {
+		printf("%s:addr: %x\n", dev_name, lk_security_alloc.addr);
+	}
+
+
+	//attack
+	dma_attack(lk_security_alloc.addr);
+	sleep(1);
+
+	security_test_check();
+
+	security_test_free();
+
+	tipc_close(fd);
+
+	return 0;
+}
+
+static int security_test_check(void)
+{
+	int fd;
+	ssize_t rc;
+	int cmp_flag = 0;
+
+	fd = tipc_connect(dev_name, security_test_check_name);
+	if (fd < 0) {
+		fprintf(stderr, "failed to connect to '%s' service\n",
+			"security_test_check");
+		return fd;
+	}
+
+	/* wait for test to complete */
+	rc = read(fd, &cmp_flag, sizeof(cmp_flag));
+	if (rc < 0) {
+		perror("security_test_check: read");
+	} else if (rc != sizeof(cmp_flag)) {
+		fprintf(stderr, "unexpected cmp_flag size (%d vs. %d)\n",
+			(int)rc, (int)sizeof(cmp_flag));
+	} else {
+		printf("%s: %s (cmp_flag=%d)\n", dev_name,
+				cmp_flag ? "not equal" : "equal", cmp_flag);
+	}
+
+	tipc_close(fd);
+
+	return 0;
+}
+
+static int security_test_free(void)
+{
+	int fd;
+	ssize_t rc;
+	int free_flag = 0;
+
+	fd = tipc_connect(dev_name, security_test_free_name);
+	if (fd < 0) {
+		fprintf(stderr, "failed to connect to '%s' service\n",
+			"security_test_free");
+		return fd;
+	}
+
+	/* wait for test to complete */
+	rc = read(fd, &free_flag, sizeof(free_flag));
+	if (rc < 0) {
+		perror("dev_uuid_test: read");
+	} else if (rc != sizeof(free_flag)) {
+		fprintf(stderr, "unexpected free_flag size (%d vs. %d)\n",
+			(int)rc, (int)sizeof(free_flag));
+	} else {
+		printf("%s: free_flag=%d\n", dev_name, free_flag);
+	}
+
+	tipc_close(fd);
+
+	return 0;
+}
+
 static int ta_access_test(void)
 {
 	int fd;
@@ -735,6 +918,14 @@
 		rc = dev_uuid_test();
 	} else if (strcmp(test_name, "ta-access") == 0) {
 		rc = ta_access_test();
+	} else if (strcmp(test_name, "security-test") == 0) {
+		rc = security_test();
+	} else if (strcmp(test_name, "security-test1") == 0) {
+		rc = dma_attack1('1');
+	} else if (strcmp(test_name, "security-test2") == 0) {
+		rc = dma_attack1('2');
+	} else if (strcmp(test_name, "security-test3") == 0) {
+		rc = dma_attack1('3');
 	} else {
 		fprintf(stderr, "Unrecognized test name '%s'\n", test_name);
 		print_usage_and_exit(argv[0], EXIT_FAILURE, true);
