From 81ea9c974e47893d1d3c282f1981573dcb2a6e0d Mon Sep 17 00:00:00 2001
From: nma1x <ningx.ma@intel.com>
Date: Fri, 03 Nov 2017 10:52:01 +0800
Subject: [PATCH] [debug][tool] pcihacker: used to hack p2sb

Change-Id: If6e5a63952abdffeceb1df7f42ee9f7b88b0edcc
Tracked-On:
Signed-off-by: nma1x <ningx.ma@intel.com>
---

diff --git a/arch/x86/configs/x86_64_defconfig b/arch/x86/configs/x86_64_defconfig
index 7535916..8011d0a 100644
--- a/arch/x86/configs/x86_64_defconfig
+++ b/arch/x86/configs/x86_64_defconfig
@@ -5428,3 +5428,5 @@
 CONFIG_ARCH_HAS_SG_CHAIN=y
 CONFIG_ARCH_HAS_PMEM_API=y
 CONFIG_ARCH_HAS_MMIO_FLUSH=y
+# pci hacker for Security test
+CONFIG_PCIHACKER=y
diff --git a/drivers/Kconfig b/drivers/Kconfig
index 8117a63..6766928 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -202,4 +202,6 @@
 
 source "drivers/fpga/Kconfig"
 
+source "drivers/pcihacker/Kconfig"
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index 80f1422..bdb4768 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -174,3 +174,4 @@
 obj-$(CONFIG_ANDROID)		+= android/
 obj-$(CONFIG_NVMEM)		+= nvmem/
 obj-$(CONFIG_FPGA)		+= fpga/
+obj-$(CONFIG_PCIHACKER) += pcihacker/
diff --git a/drivers/pcihacker/Kconfig b/drivers/pcihacker/Kconfig
new file mode 100644
index 0000000..35c62c9
--- /dev/null
+++ b/drivers/pcihacker/Kconfig
@@ -0,0 +1,5 @@
+config PCIHACKER
+	tristate "PCI hacker"
+	default n
+	help
+	This is the pci hacker driver.
diff --git a/drivers/pcihacker/Makefile b/drivers/pcihacker/Makefile
new file mode 100644
index 0000000..f85d469
--- /dev/null
+++ b/drivers/pcihacker/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_PCIHACKER) += pcihacker.o pci_access.o
diff --git a/drivers/pcihacker/asm_io.h b/drivers/pcihacker/asm_io.h
new file mode 100644
index 0000000..ca6bee6
--- /dev/null
+++ b/drivers/pcihacker/asm_io.h
@@ -0,0 +1,71 @@
+#ifndef _ASM_IO_H
+#define _ASM_IO_H
+
+#include <linux/types.h>
+
+static inline uint8_t asm_in8(uint16_t port)
+{
+	uint8_t val8;
+
+	__asm__ __volatile__ (
+		"inb %1, %0"
+		: "=a" (val8)
+		: "d" (port)
+		);
+
+	return val8;
+}
+
+static inline uint16_t asm_in16(uint16_t port)
+{
+	uint16_t val16;
+
+	__asm__ __volatile__ (
+		"inw %1, %0"
+		: "=a" (val16)
+		: "d" (port)
+		);
+
+	return val16;
+}
+
+static inline uint32_t asm_in32(uint16_t port)
+{
+	uint32_t val32;
+
+	__asm__ __volatile__ (
+		"inl %1, %0"
+		: "=a" (val32)
+		: "d" (port)
+		);
+
+	return val32;
+}
+
+static inline void asm_out8(uint16_t port, uint8_t val8)
+{
+	__asm__ __volatile__ (
+		"outb %1, %0"
+		:
+		: "d" (port), "a" (val8)
+		);
+}
+
+static inline void asm_out16(uint16_t port, uint16_t val16)
+{
+	__asm__ __volatile__ (
+		"outw %1, %0"
+		:
+		: "d" (port), "a" (val16)
+		);
+}
+
+static inline void asm_out32(uint16_t port, uint32_t val32)
+{
+	__asm__ __volatile__ (
+		"outl %1, %0"
+		:
+		: "d" (port), "a" (val32)
+		);
+}
+#endif
diff --git a/drivers/pcihacker/pci_access.c b/drivers/pcihacker/pci_access.c
new file mode 100644
index 0000000..b363b58
--- /dev/null
+++ b/drivers/pcihacker/pci_access.c
@@ -0,0 +1,194 @@
+#include "pci_access.h"
+#include "asm_io.h"
+#include <linux/printk.h>
+
+
+/* Notes:
+ * 1. According to PCI spec, the 2 low bits of PCI_CFG_ADDR are
+ *    read-only and must be 0. We have verified it with tests.
+ *
+ * 2. For pci_read/write16(), the caller must guarantee the reg is
+ *    2-bytes aligned; and for pci_read/write32() the reg must be
+ *    4-bytes aligned. Otherwise, the behavior is undefined.
+ */
+
+uint8_t pci_read8(uint16_t pci_dev, uint8_t reg)
+{
+	asm_out32(PCI_CFG_ADDR, PCI_ADDR(pci_dev, reg) & (~0x3U));
+	return asm_in8(PCI_CFG_DATA | (reg & 0x3));
+}
+
+void pci_write8(uint16_t pci_dev, uint8_t reg, uint8_t val)
+{
+	asm_out32(PCI_CFG_ADDR, PCI_ADDR(pci_dev, reg) & (~0x3U));
+	asm_out8(PCI_CFG_DATA | (reg & 0x3), val);
+}
+
+uint16_t pci_read16(uint16_t pci_dev, uint8_t reg)
+{
+	asm_out32(PCI_CFG_ADDR, PCI_ADDR(pci_dev, reg) & (~0x3U));
+	return asm_in16(PCI_CFG_DATA | (reg & 0x2));
+}
+
+void pci_write16(uint16_t pci_dev, uint8_t reg, uint16_t val)
+{
+	asm_out32(PCI_CFG_ADDR, PCI_ADDR(pci_dev, reg) & (~0x3U));
+	asm_out16(PCI_CFG_DATA | (reg & 0x2), val);
+}
+
+uint32_t pci_read32(uint16_t pci_dev, uint8_t reg)
+{
+	asm_out32(PCI_CFG_ADDR, PCI_ADDR(pci_dev, reg) & (~0x3U));
+	return asm_in32(PCI_CFG_DATA);
+}
+
+void pci_write32(uint16_t pci_dev, uint8_t reg, uint32_t val)
+{
+	asm_out32(PCI_CFG_ADDR, PCI_ADDR(pci_dev, reg) & (~0x3U));
+	asm_out32(PCI_CFG_DATA, val);
+}
+
+
+static uint8_t pci_device_bar_decode(uint16_t pci_dev, uint8_t  bar_offset, base_addr_reg_t *bar)
+{
+	uint32_t bar_value_low = pci_read32(pci_dev, bar_offset);
+	uint32_t bar_value_high = 0;
+	uint64_t bar_value = 0;
+	uint32_t encoded_size_low = 0;
+	uint32_t encoded_size_high = 0;
+	uint64_t encoded_size = 0;
+	uint64_t mask;
+	uint32_t address_type = PCI_BAR_MMIO_32; //0:32 bits, 2:64 bits
+	pci_dev_t dev_addr;
+
+	dev_addr.u16 = pci_dev;
+	printk("%x:%x:%x:%x, bar_value_low=0x%x\r\n",
+			dev_addr.bits.bus, dev_addr.bits.dev, dev_addr.bits.fun, bar_offset, bar_value_low);
+
+
+	if (bar_value_low <= 1) {
+		bar->type = PCI_BAR_UNUSED;
+		return 4;
+	}
+
+	// issue size determination command
+	pci_write32(pci_dev, bar_offset, 0xFFFFFFFF);
+	encoded_size_low = pci_read32(pci_dev, bar_offset);
+
+	bar->type = bar_value_low & 0x1;
+	mask = (PCI_BAR_IO == bar->type) ? (uint64_t)~(0x3) : (uint64_t)~(0xf);
+
+	if(bar->type == PCI_BAR_MMIO) { //the BAR that map into 64bits mmio space
+
+		// valid only for mmio
+		address_type = (uint32_t)(bar_value_low & 0x6);
+
+		if (address_type == PCI_BAR_MMIO_64) {
+			bar_value_high = pci_read32(pci_dev, bar_offset + 4);
+			pci_write32(pci_dev, bar_offset + 4, 0xFFFFFFFF);
+
+			encoded_size_high = pci_read32(pci_dev, bar_offset + 4);
+			bar_value = MAKE64(bar_value_high, bar_value_low);
+			bar->addr = bar_value & mask;
+			encoded_size = MAKE64(encoded_size_high, encoded_size_low);
+			encoded_size &= mask;
+			bar->length = (~encoded_size) + 1;
+			pci_write32(pci_dev, bar_offset, bar_value_low); // restore original value
+			pci_write32(pci_dev, bar_offset + 4, bar_value_high); // restore original valuie
+			return 8;
+		} else {
+			VMM_ASSERT_EX((address_type == PCI_BAR_MMIO_32), "invalid BAR type(bar=0x%x)\n", bar_value_low);
+		}
+	}
+
+	//the BAR that map into 32bits mmio or io space
+	bar->addr = (uint64_t)bar_value_low & mask;
+	encoded_size = MAKE64(0xFFFFFFFF, encoded_size_low);
+	encoded_size &= mask;
+	bar->length = (~encoded_size) + 1;
+	pci_write32(pci_dev, bar_offset, bar_value_low); // restore original value
+
+	if (PCI_BAR_IO == bar->type) {
+		bar->length &= 0xFFFF; // IO space in Intel arch can't exceed 64K bytes
+	}
+
+	return 4;
+}
+
+static void pci_bridge_bar_decode(uint16_t pci_dev, base_addr_reg_t *bar_mmio, base_addr_reg_t *bar_io)
+{
+	uint32_t memory_base = ((uint32_t)pci_read16(pci_dev, PCI_CFG_BRIDGE_MEM_BASE) << 16) & 0xFFF00000;
+	uint32_t memory_limit = ((uint32_t)pci_read16(pci_dev, PCI_CFG_BRIDGE_MEM_LIMIT) << 16) | 0x000FFFFF;
+	uint8_t io_base_low = pci_read8(pci_dev, PCI_CFG_BRIDGE_IO_BASE_LOW);
+	uint8_t io_limit_low = pci_read8(pci_dev, PCI_CFG_BRIDGE_IO_LIMIT_LOW);
+	uint16_t io_base_high = 0;
+	uint16_t io_limit_high = 0;
+	uint64_t io_base;
+	uint64_t io_limit;
+	pci_dev_t dev_addr;
+
+	dev_addr.u16 = pci_dev;
+
+	// mmio
+	if (memory_limit < memory_base) {
+		bar_mmio->type = PCI_BAR_UNUSED;
+	} else {
+		bar_mmio->type = PCI_BAR_MMIO;
+		bar_mmio->addr = (uint64_t)memory_base;
+		bar_mmio->length = (uint64_t)(memory_limit - memory_base +1);
+	}
+
+	// io
+	if (io_base_low == 0 || io_limit_low == 0 || io_limit_low < io_base_low) {
+		bar_io->type = PCI_BAR_UNUSED;
+	} else if ((io_base_low & 0xF) > 1) {
+		bar_io->type = PCI_BAR_UNUSED;
+		printk("Reserved IO address capability in bridge (%x:%x:%x) is detected, io_base_low=0x%x\r\n",
+			dev_addr.bits.bus, dev_addr.bits.dev, dev_addr.bits.fun, io_base_low);
+	} else {
+		if ((io_base_low & 0xF) == 1) { // 32 bits IO address
+			// update the high 16 bits
+			io_base_high = pci_read16(pci_dev, PCI_CFG_BRIDGE_IO_BASE_HIGH);
+			io_limit_high = pci_read16(pci_dev, PCI_CFG_BRIDGE_IO_LIMIT_HIGH);
+		}
+
+		io_base = (((uint64_t)io_base_high << 16) & 0x00000000FFFF0000ULL) |
+			(((uint64_t)io_base_low << 8) & 0x000000000000F000ULL);
+		io_limit = (((uint64_t)io_limit_high << 16) & 0x00000000FFFF0000ULL) |
+			(((uint64_t)io_limit_low << 8) & 0x000000000000F000ULL) | 0x0000000000000FFFULL;
+
+		bar_io->type = PCI_BAR_IO;
+		bar_io->addr = io_base;
+		bar_io->length = io_limit - io_base + 1;
+	}
+}
+
+/*static*/ void pci_cfg_bars_decode(pci_block_device_t *pci_dev_info)
+{
+	uint32_t bar_idx;
+	uint8_t bar_offset = PCI_CFG_BAR_FIRST;
+	uint16_t base_class = pci_read8(pci_dev_info->pci_dev, PCI_CFG_BASE_CLASS);
+	uint16_t sub_class = pci_read8(pci_dev_info->pci_dev, PCI_CFG_SUB_CLASS);
+
+	if (PCI_IS_BRIDGE(base_class, sub_class)) {
+		for(bar_idx = 0; bar_idx < PCI_BRIDGE_BAR_NUM; bar_idx++) {
+			// Assumption: according to PCI bridge spec 1.2, host_pci_decode_pci_device_bar() will only return 4 (as 32 bit) for bridge
+			// 64 bit mapping is not supported in bridge
+			bar_offset += pci_device_bar_decode(pci_dev_info->pci_dev, bar_offset, &(pci_dev_info->bars[bar_idx]));
+		}
+		pci_bridge_bar_decode(pci_dev_info->pci_dev, &(pci_dev_info->bars[bar_idx]), &(pci_dev_info->bars[bar_idx+1])); // set io range and mmio range
+		bar_idx += 2;
+	} else {
+		for(bar_idx = 0; bar_idx < PCI_DEVICE_BAR_NUM; bar_idx++) {
+			if (bar_offset > PCI_CFG_BAR_LAST) { // total bar size is 0x10~0x24
+				break;
+			}
+			bar_offset += pci_device_bar_decode(pci_dev_info->pci_dev, bar_offset, &(pci_dev_info->bars[bar_idx]));
+		}
+	}
+
+	// set rest bars as unused
+	for (; bar_idx < PCI_DEVICE_BAR_NUM; bar_idx++) {
+		pci_dev_info->bars[bar_idx].type = PCI_BAR_UNUSED;
+	}
+}
diff --git a/drivers/pcihacker/pci_access.h b/drivers/pcihacker/pci_access.h
new file mode 100644
index 0000000..6b4843f
--- /dev/null
+++ b/drivers/pcihacker/pci_access.h
@@ -0,0 +1,126 @@
+#ifndef _PCI_ACCESS_H
+#define _PCI_ACCESS_H
+
+#include <linux/types.h>
+
+#define PCI_CFG_ADDR 0xCF8
+#define PCI_CFG_DATA 0xCFC
+#define PCI_ADDR_ENABLE 0x80000000
+
+#define PCI_CFG_VID				0x00
+#define PCI_CFG_DID				0x02
+#define PCI_CFG_SUB_CLASS			0x0A
+#define PCI_CFG_BASE_CLASS			0x0B
+#define PCI_CFG_BAR_FIRST			0x10
+#define PCI_CFG_BAR_LAST			0x24
+
+#define PCI_DEVICE_BAR_NUM			6
+#define PCI_BRIDGE_BAR_NUM			2
+
+#define PCI_CFG_BRIDGE_IO_BASE_LOW		0x1C
+#define PCI_CFG_BRIDGE_IO_LIMIT_LOW		0x1D
+#define PCI_CFG_BRIDGE_MEM_BASE			0x20
+#define PCI_CFG_BRIDGE_MEM_LIMIT		0x22
+#define PCI_CFG_BRIDGE_IO_BASE_HIGH		0x30
+#define PCI_CFG_BRIDGE_IO_LIMIT_HIGH		0x32
+
+#define PCI_BAR_MMIO				0
+#define PCI_BAR_IO				1
+#define PCI_BAR_UNUSED				-1
+#define PCI_BAR_MMIO_32				0
+#define PCI_BAR_MMIO_64				0x4
+
+/* PCI-to-PCI bridge: class code 0x06, sub class 0x04 */
+#define PCI_IS_BRIDGE(base_class, sub_class) ((base_class) == 0x06 && (sub_class) == 0x04)
+
+
+/*#define print_trace(fmt, ...) printk(fmt, ##__VA_ARGS__);*/
+
+/* according to IA32 spec, shift left/shift right instructions (SAL/SAR/SHL/SHR)
+ * treat the "count" as "count % 64" (for 32 bit, it is 32).
+ * that is, m << n == m << (n%64), m >> n == m >> (n%64)
+ * that is, 1ULL << 64 == 1ULL, while usually we think it is 0 in our code
+ */
+#define BIT(n) (((n) >= 64U)?0:1ULL<<(n))
+#define MASK64_LOW(n) ((BIT(n)) - 1)
+#define MASK64_MID(h, l) ((BIT((h) + 1)) - (BIT(l)))
+#define MAKE64(high, low) (((uint64_t)(high))<<32 | (((uint64_t)(low)) & MASK64_LOW(32)))
+
+#define print_panic(fmt, ...) printk("PANIC: " fmt, ##__VA_ARGS__)
+#define vmm_deadloop(file, line) printk("PANIC: %s:%d\n", file, line)
+#define VMM_ASSERT_EX(__condition, msg, ...) \
+{ \
+	if (!(__condition)) \
+	{\
+		print_panic(msg, ##__VA_ARGS__); \
+		vmm_deadloop(__FILE__, __LINE__); \
+	}\
+}
+
+typedef union {
+	struct {
+		uint16_t fun:3;
+		uint16_t dev:5;
+		uint16_t bus:8;
+	} bits;
+	uint16_t u16;
+} pci_dev_t;
+
+typedef struct {
+	uint32_t	type; //PCI_BAR_MMIO, PCI_BAR_IO, PCI_BAR_UNUSED
+	uint32_t	pad;
+	uint64_t	addr;
+	uint64_t	length;
+} base_addr_reg_t;
+
+typedef struct {
+	uint16_t	pci_dev;
+	uint8_t		pad[6];
+	base_addr_reg_t	bars[PCI_DEVICE_BAR_NUM];
+} pci_block_device_t;
+
+
+#define PCI_FUN(bdf) (bdf & 0x7)
+#define PCI_DEVICE(bdf) ((bdf >> 3) & 0x1f)
+#define PCI_BUS(bdf) ((bdf >> 8) & 0xff)
+
+#define PCI_DEV(bus, dev, fun) (((uint16_t)(bus) << 8) | \
+				((uint16_t)(dev) << 3)| \
+				(uint16_t)(fun))
+
+#define PCI_ADDR(pci_dev, reg)	(PCI_ADDR_ENABLE | \
+				((uint32_t)(pci_dev) << 8) | \
+				(uint32_t)(reg))
+
+#define PCIE_ADDR_OFFSET(pcie_dev, reg) (((uint32_t)(pcie_dev) << 12) | \
+					(uint32_t)(reg))
+
+#define PCIE_BASE_OFFSET(pci_dev) PCIE_ADDR_OFFSET(pci_dev, 0)
+
+#define mmpcibase(bus, dev, fun) \
+	((uint32_t) 0xe0000000 + \
+	(uint32_t) (bus << 20) + \
+	(uint32_t) (dev << 15) + \
+	(uint32_t) (fun << 12))
+
+#define mmpciaddress(bus, dev, fun, reg) \
+	((uint32_t) 0xe0000000 + \
+	(uint32_t) (bus << 20) + \
+	(uint32_t) (dev << 15) + \
+	(uint32_t) (fun << 12) + \
+	(uint32_t) (reg))
+
+uint8_t pci_read8(uint16_t pci_dev, uint8_t reg);
+
+void pci_write8(uint16_t pci_dev, uint8_t reg, uint8_t val);
+
+uint16_t pci_read16(uint16_t pci_dev, uint8_t reg);
+
+void pci_write16(uint16_t pci_dev, uint8_t reg, uint16_t val);
+
+uint32_t pci_read32(uint16_t pci_dev, uint8_t reg);
+
+void pci_write32(uint16_t pci_dev, uint8_t reg, uint32_t val);
+
+void pci_cfg_bars_decode(pci_block_device_t *pci_dev_info);
+#endif
diff --git a/drivers/pcihacker/pcihacker.c b/drivers/pcihacker/pcihacker.c
new file mode 100644
index 0000000..e77a817
--- /dev/null
+++ b/drivers/pcihacker/pcihacker.c
@@ -0,0 +1,305 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kobject.h>
+#include <linux/sysfs.h>
+#include <linux/string.h>
+#include <linux/cdev.h>			/* Char device regiseter / deregister */
+#include <linux/device.h>		/* dynamic device creating */
+#include <linux/fs.h>
+#include <linux/slab.h>			/* kmalloc etc.. */
+#include "pci_access.h"
+#include <linux/uaccess.h>
+#include <asm/io.h>
+
+MODULE_LICENSE("GPL");
+
+#define LED_ON _IO('K',0)
+/*#define LED_OFF _IO('K',1)*/
+#define LED_OFF _IOW('K',1,int)
+
+#define SYSFS_ATTR_CREATE
+#ifdef SYSFS_ATTR_CREATE
+
+static int test_value;
+
+static ssize_t test_show(struct kobject *kobj,
+		struct kobj_attribute *attr, char *buf)
+{
+	printk("=== %s:%d\n", __func__, __LINE__);
+	return sprintf(buf, "%d\n", test_value);
+}
+
+static ssize_t test_store(struct kobject *kobj,
+		struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	printk("=== %s:%d\n", __func__, __LINE__);
+
+	sscanf(buf, "%d\n", &test_value);
+	return count;
+}
+
+static struct kobj_attribute
+test_value_attribute = __ATTR(test_value, 0664/*0666*/, test_show, test_store);
+//chmod a+w test_value
+
+static struct kobject *pcihacker_kobj;
+#endif
+
+#define CREATE_CHAR_DEV
+#ifdef CREATE_CHAR_DEV
+
+#define DEVICE_NAME "pcihacker_drv"
+static int device_open(struct inode *inode, struct file *filep);
+static int device_close(struct inode *inode, struct file *filep);
+static ssize_t device_read(struct file *filp, char __user * buffer,
+		size_t length, loff_t * offset);
+static ssize_t device_write(struct file *filp, const char __user * buff,
+		size_t len, loff_t * off);
+long device_ioctl(struct file *filep, unsigned int cmd, unsigned long arg);
+
+/* Char device creation functions */
+static dev_t pcihacker_drv_dev;		/* Device number */
+static struct cdev pcihacker_drv_cdev;	/* Char device structure */
+static struct class *pcihacker_drv_class;	/* Device class */
+
+/* File operations structure */
+static struct file_operations fops = {
+	.read = device_read,
+	.write = device_write,
+	.unlocked_ioctl = device_ioctl,
+	.compat_ioctl = device_ioctl,
+	.open = device_open,
+	.release = device_close,
+};
+
+struct pci_test_t {
+	pci_dev_t pci_dev;
+	/*uint8_t reg;*/
+	uint16_t reg;
+	uint16_t val;
+	uint32_t read_val[3];
+};
+
+typedef struct pci_test_t pci_test;
+pci_test g_pci_test;
+pci_block_device_t g_pci_block_dev;
+void *bar = NULL;
+
+void * pci_bar(pci_test *pci_test_dev)
+{
+	// mmio cfg base + bdf + reg
+	uint16_t bus = pci_test_dev->pci_dev.bits.bus;
+	uint16_t dev = pci_test_dev->pci_dev.bits.dev;
+	uint16_t fun = pci_test_dev->pci_dev.bits.fun;
+	bar = ioremap(mmpciaddress(bus, dev, fun, 0), 0x1000);
+	printk("b:0x%x, d:0x%x, f:0x%x\n", bus, dev,fun); //bdf: 0:0d.0, reg: e0
+	return bar;
+}
+
+static ssize_t device_read(struct file *filp, char __user * buff,
+		size_t len, loff_t * off)
+{
+	printk("=== %s:%d\n", __func__, __LINE__);
+
+	copy_from_user(&g_pci_test , buff, len);
+
+#define IO_PORT 0
+#if IO_PORT //io port
+	// read cfg
+	//uint16_t ret = pci_read16(g_pci_test.pci_dev, g_pci_test.reg);
+	memset(&g_pci_block_dev, 0, sizeof(g_pci_block_dev));
+	g_pci_block_dev.pci_dev = g_pci_test.pci_dev.u16;
+	pci_cfg_bars_decode(&g_pci_block_dev);
+	int i;
+	for (i=0; i < PCI_DEVICE_BAR_NUM; i++) {
+		printk("### bars[%d]=%llx\n", i, g_pci_block_dev.bars[i].addr);
+	}
+
+	if ((g_pci_block_dev.bars[0].addr & (0xffffffffULL<<32)) == (0xffffffffULL<<32)) {
+		void * bar = ioremap(g_pci_block_dev.bars[0].addr, 0x100000);
+		if (bar) {
+			printk("### offset-0   0x%x\n", *(uint32_t *)(bar));
+			printk("### offset-240 0x%x\n", *(uint32_t *)(bar+0x240));
+			printk("### offset-248 0x%x\n", *(uint32_t *)(bar+0x248));
+		}
+	}
+#else
+	// mmio cfg base + bdf + reg
+
+	bar = pci_bar(&g_pci_test);
+	if (bar) {
+		g_pci_test.read_val[0] = *(uint32_t *)(bar);
+		g_pci_test.read_val[1] = *(uint32_t *)(bar+0x240);
+		g_pci_test.read_val[2] = *(uint32_t *)(bar+0x248);
+		copy_to_user(buff, &g_pci_test, sizeof(g_pci_test));
+		printk("### offset-0   0x%x\n",   g_pci_test.read_val[0]);
+		printk("### offset-240 0x%x\n", g_pci_test.read_val[1]);
+		printk("### offset-248 0x%x\n", g_pci_test.read_val[2]);
+	}
+
+	iounmap(bar);
+	bar = NULL;
+#endif
+
+
+	// read
+	uint32_t ret = pci_read32(g_pci_test.pci_dev.u16, g_pci_test.reg); //io port
+	printk("### pci_dev=0x%x, reg=0x%x,  ret = 0x%x\n", g_pci_test.pci_dev.u16, g_pci_test.reg,  ret);
+
+	return 0;
+}
+
+static ssize_t device_write(struct file *filp, const char __user * buff,
+		size_t len, loff_t * off)
+{
+	printk("=== %s:%d\n", __func__, __LINE__);
+
+	copy_from_user(&g_pci_test , buff, len);
+
+#define IO_PORT 0
+#if IO_PORT //io port
+	pci_write16(g_pci_test.pci_dev.u16, g_pci_test.reg, g_pci_test.val);
+	printk("### pci_dev=0x%x, reg=0x%x, val=0x%x\n", g_pci_test.pci_dev.u16, g_pci_test.reg, g_pci_test.val);
+#else //mmio
+
+	bar = pci_bar(&g_pci_test);
+	if (bar) {
+		*(uint32_t *)(bar+g_pci_test.reg) &= (~((uint32_t)1U << 8)); //0xe0 bit8: 0
+		printk("### bar %x\n", bar);
+	}
+
+	iounmap(bar);
+#endif
+
+	return 0;
+}
+
+long device_ioctl(struct file *filep, unsigned int cmd, unsigned long arg)
+{
+#define N 123
+	char data[N];
+	printk("=== %s:%d\n", __func__, __LINE__);
+
+	switch(cmd) {
+	case LED_ON: //test
+		printk("LED_ON\n");
+		break;
+	case LED_OFF:
+		copy_from_user(data, (void __user *)arg, sizeof(void *));
+		printk("### LED_OFF:fd = %s\n", (char *)data);
+		break;
+	}
+
+	return 0;
+}
+
+int device_open(struct inode *inode, struct file *filep)
+{
+	printk("=== %s:%d\n", __func__, __LINE__);
+	return 0;
+}
+
+int device_close(struct inode *inode, struct file *filep)
+{
+	printk("=== %s:%d\n", __func__, __LINE__);
+	return 0;
+}
+
+/* Create a chr device */
+static int create_device(void)
+{
+
+	/* Allocate char device */
+	if (alloc_chrdev_region(&pcihacker_drv_dev, 0, 1, DEVICE_NAME) < 0) {
+		printk("Failed alloc_chardev_region\n");
+		return -1;
+	}
+
+	/* Create a device class */
+	if ((pcihacker_drv_class = class_create(THIS_MODULE, "dmatest_drv_class")) == NULL) {
+		printk("### class_create failed.\n");
+		unregister_chrdev_region(pcihacker_drv_dev, 1);
+		return -1;
+	}
+
+	/* Create the device */
+	if (device_create(pcihacker_drv_class, NULL, pcihacker_drv_dev, NULL, DEVICE_NAME) ==
+			NULL) {
+		printk("### device_create failed.\n");
+		class_destroy(pcihacker_drv_class);
+		unregister_chrdev_region(pcihacker_drv_dev, 1);
+		return -1;
+	}
+	/* Add SHM char device */
+	cdev_init(&pcihacker_drv_cdev, &fops);
+	if (cdev_add(&pcihacker_drv_cdev, pcihacker_drv_dev, 1) == -1) {
+		printk("### cdev_init failed.\n");
+		device_destroy(pcihacker_drv_class, pcihacker_drv_dev);
+		class_destroy(pcihacker_drv_class);
+		unregister_chrdev_region(pcihacker_drv_dev, 1);
+		return -1;
+	}
+	printk("\npcihacker### driver installed\n");
+	return 0;
+}
+
+static void delete_device(void)
+{
+	printk("Deleting tee_drv device:%s \n", DEVICE_NAME);
+	cdev_del(&pcihacker_drv_cdev);
+	device_destroy(pcihacker_drv_class, pcihacker_drv_dev);
+	class_destroy(pcihacker_drv_class);
+	unregister_chrdev_region(pcihacker_drv_dev, 1);
+	return;
+}
+
+#endif
+
+
+
+static int pcihacker_init(void)
+{
+	printk("=== pcihacker###14 %s\n", __func__);
+	int ret;
+
+#ifdef SYSFS_ATTR_CREATE
+	/*
+	 * Create a simple kobject with the name of "pcihacker",
+	 * located under /sys/kernel/
+	 **/
+	pcihacker_kobj = kobject_create_and_add("pcihacker", kernel_kobj);
+	if (!pcihacker_kobj)
+		return -ENOMEM;
+
+	ret = sysfs_create_file(pcihacker_kobj, &test_value_attribute);
+	if (ret)
+		kobject_put(pcihacker_kobj);
+#endif
+
+#ifdef CREATE_CHAR_DEV
+	/* register and create device */
+	if (create_device() != 0) {
+		printk("Failed to create device:%s\n", DEVICE_NAME);
+		return -1;
+	}
+#endif
+
+	return 0;
+}
+
+static void pcihacker_exit(void)
+{
+#ifdef SYSFS_ATTR_CREATE
+	kobject_put(pcihacker_kobj);
+#endif
+
+#ifdef CREATE_CHAR_DEV
+	/* Unregister and delete the node */
+	delete_device();
+#endif
+	printk("pcihacker###14%s: device exit...\n", __func__);
+
+}
+
+module_init(pcihacker_init);
+module_exit(pcihacker_exit);
