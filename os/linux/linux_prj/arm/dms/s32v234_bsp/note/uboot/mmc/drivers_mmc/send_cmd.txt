

esdhc_send_cmd:
===============
(1)
	esdhc_write32(&regs->irqstat, -1);
	sync();

(2) Wait for the bus to be idle by check CDIHB and CIDHB
	while ((esdhc_read32(&regs->prsstat) & PRSSTAT_CICHB) ||
			(esdhc_read32(&regs->prsstat) & PRSSTAT_CIDHB))
		;

	while (esdhc_read32(&regs->prsstat) & PRSSTAT_DLA)
		;

ps:[S32V234_RM2.2pdf: 49.3.4]
-----------------------------
	CDIHB: command inhibit DAT bit
	When the CDIHB bit in the Present State register is set, any attempt to send a
	command with data by writing to this register is ignored; 

	Present State(uSDHC_PRES_STATE):
		CDIHB: bit1  => #define PRSSTAT_CICHB		(0x00000002)
		CIHB:  bit0  => #define PRSSTAT_CIDHB		(0x00000001)
	CIHB: command inhibit CMD bit
	This bit is set also immediately after the Transfer Type register is written.
	This bit is cleared when the command response is received. 
	Even if the Command Inhibit (DAT) is set to 1, Commands using only the
	CMD line can be issued if this bit is 0. 

	when the CIHB bit is set, any write to this register is ignored


	Present State(uSDHC_PRES_STATE):
		DLA(data line active): 2'bit

(3)
	/* Set up for a data transfer if we have one */

	err = esdhc_setup_data(mmc, data); // set dsaddr
	if (data->flags & MMC_DATA_READ) {
		//printf("#mn:[%s\n] to call check_and_invalidate_dcache_range\n", __func__);
		check_and_invalidate_dcache_range(cmd, data);
	}

(4)
	/* Figure out the transfer arguments */
	xfertyp = esdhc_xfertyp(cmd, data); //cmd->resp_type, cmd->cmdidx, ...
(5)

	/* Mask all irqs */
	esdhc_write32(&regs->irqsigen, 0);

ps:
49.3.15 Interrupt Signal Enable (uSDHC_INT_SIGNAL_EN)
	 used to select which interrupt status is indicated to the Host System as
	 the interrupt. 
These status bits all share the same interrupt line. Setting any of these bits
to 1 enables interrupt generation.

(6) /* Send the command */
	esdhc_write32(&regs->cmdarg, cmd->cmdarg);

	esdhc_write32(&regs->mixctrl,
	(esdhc_read32(&regs->mixctrl) & 0xFFFFFF80) | (xfertyp & 0x7F)
			| (mmc->ddr_mode ? XFERTYP_DDREN : 0));
	esdhc_write32(&regs->xfertyp, xfertyp & 0xFFFF0000);

log:load image
--------------
#mn:[find_mmc_device]
#mn:[esdhc_send_cmd]mmc->ddr_mode=0, xfertyp=0x101a0000
#mn[esdhc_setup_data]
#mn: [esdhc_setup_data] set dsaddr
#mn:[esdhc_send_cmd]mmc->ddr_mode=0, xfertyp=0x123a0037
#mn:[disk_read]
#mn:[mmc_bread]
//xfertyp & 0xFFFF0000: 0x123a0000

ps:
49.3.3 Command Argument (uSDHC_CMD_ARG)

	/* Send the command */
	esdhc_write32(&regs->cmdarg, cmd->cmdarg);

struct mmc_cmd {
	ushort cmdidx;
	uint resp_type;
	uint cmdarg;
	uint response[4];
};

49.3.19 Mixer Control (uSDHC_MIX_CTRL)
	used to DMA and data transfer. 
	Only when data transfer is invalid, the following fields can be written: 
	MSBSEL(bit5), DTDSEL(bit4), AC12EN(bit2), BCEN(bit1) and DMAEN(bit0)
	bit6: reserved
	bit7: AC23EN
	bit3: Dual Data Rate mode selection

	DMAEN: enalbes DMA functionality.
	If this bit is set to 1, a DMA operation shall begin when the Host Driver
	sets the DPSEL bit of this register. Whether the Simple DMA, or the Advanced
	DMA, is active depends on the DMA Select field of the Protocol Control register.
	(xfertyp & 0x7F)
	7f: 0111 1111

	DDR_EN: bit[3]
	#define XFERTYP_DDREN		0x00000008 //bit[3:0]1000

49.3.4 Command Transfer Type (uSDHC_CMD_XFR_TYP)
	used to control the operation of data transfers. The Host Driver shall set
	this register before issuing a command followed by a data transfer, or
	before issuing a Resume command. 
	bit[31:16]:
		bit[29:24]: CMDINX, command index
		bit[23:22]: CMDTYP, command type
		bit[21]: DPSEL, data present select
			This bit is set to 1 to indicate that data is present and shall be
			transferred using the DAT line. 

		bit[20]: CICEN, command index check enable
		bit[19]: CCCEN, command CRC check enable
		bit[17:16]: RSPTYO, response type select


(7) /* Wait for the command to complete */
	while (!(esdhc_read32(&regs->irqstat) & (IRQSTAT_CC | IRQSTAT_CTOE)))
		;

ps:
49.3.13 Interrupt Status (uSDHC_INT_STATUS)
	bit[16]: CTOE, command timeout error
		#define IRQSTAT_CTOE		(0x00010000)
	bit01]: command complete
		#define IRQSTAT_CC		(0x00000001)

(8) check irqstat

	irqstat = esdhc_read32(&regs->irqstat);

	if (irqstat & CMD_ERR) {
		err = COMM_ERR;
		goto out;
	}

	if (irqstat & IRQSTAT_CTOE) {
		err = TIMEOUT;
		goto out;
	}


(9)
	/* Switch voltage to 1.8V if CMD11 succeeded */
	if (cmd->cmdidx == SD_CMD_SWITCH_UHS18V) {
		esdhc_setbits32(&regs->vendorspec, ESDHC_VENDORSPEC_VSELECT);

		printf("Run CMD11 1.8V switch\n");
		/* Sleep for 5 ms - max time for card to switch to 1.8V */
		udelay(5000);
	}

	/* Workaround for ESDHC errata ENGcm03648 */
(10)
	/* Copy the response to the response buffer */
		cmd->response[0] = esdhc_read32(&regs->cmdrsp0);
		...
ps:
49.3.5 Command Response0 (uSDHC_CMD_RSP0)
	store part 0 of the response bits from the card.

(11)
	/* Wait until all of the blocks are transferred */

		do {
			irqstat = esdhc_read32(&regs->irqstat);
			if (irqstat & IRQSTAT_DTOE) {
				err = TIMEOUT;
				goto out;
			}

			if (irqstat & DATA_ERR) {
				err = COMM_ERR;
				goto out;
			}
		} while ((irqstat & DATA_COMPLETE) != DATA_COMPLETE);

		/*
		 * Need invalidate the dcache here again to avoid any
		 * cache-fill during the DMA operations such as the
		 * speculative pre-fetching etc.
		 */
		if (data->flags & MMC_DATA_READ)
			check_and_invalidate_dcache_range(cmd, data);
(12) 
	esdhc_write32(&regs->irqstat, -1);

=================
esdhc_setup_data:
-----------------
read:

dsaddr: SDMA system address register
(1) get and set physical addr
	addr = virt_to_phys((void *)(data->dest));

	esdhc_write32(&regs->dsaddr, (u32)data->dest);



-------------------------
check_and_invalidate_dcache_range [fsl_esdhc.c]
|-> invalidate_dcache_range [arch/arm/cpu/armv8/cache_v8.c]
	|-> __asm_flush_dcache_range(start, stop) [arch/arm/cpu/armv8/cache.S]
		// Invalidates range in all levels of D-cache/unified cache
		// clean & invalidate data cache in the range

=====================================
49.3.17 Host Controller Capabilities (uSDHC_HOST_CTRL_CAP)


HSS: bit[21] high speed support
