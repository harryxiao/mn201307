tty

--------------------------------------------------------------------------------
open console:
static const struct file_operations console_fops = {
	.open		= tty_open,
	.write		= redirected_tty_write,

redirected_tty_write



*********************************************************************************
open tty:

//tty_io.c
(1)struct file_operations tty_fops: 
	.open		= tty_open, // open a tty device

//serial_core.c
(2)	|-->retval = tty->ops->open(tty, filp); //where ops = uart_ops?
		<=> struct tty_operations uart_ops:
				.open		= uart_open,
(3)				|-->retval = uart_startup(tty, state, 0); //Start up the serial port.
(4)					|-->retval = uart_port_startup(tty, state, init_hw);//Startup the port.  This will be called once per open.

//8250_port.c
(5)						|-->retval = uport->ops->startup(uport);
							<=> struct uart_ops serial8250_pops = {
									.startup	= serial8250_startup,
(6)									|-->serial8250_do_startup(port);
(7)										|-- if (up->dma) // check if dma
												retval = serial8250_request_dma(up);

---------
	//tty_io.c
	(1)tty_open

	//serial/serial_core.c
	-> (2)uart_open -> (3)uart_startup -> (4)uart_port_startup

	//8250_port.c
	-> (5)serial8250_startup
	-> (6)serial8250_do_startup
	-> (7)if (up->dma)  serial8250_request_dma(up);


--------------------------------------------------------------------------------
tty_read	-	read method for tty device files

struct file_operations tty_fops
	.read		= tty_read,

--------------------------------------------------------------------------------
write:

struct tty_ldisc_ops tty_ldisc_N_TTY = { //n_tty.c
	.write           = n_tty_write,
	|-> if (tty->ops->flush_chars)
			tty->ops->flush_chars(tty);
			<=>	struct tty_operations uart_ops = {
					.flush_chars	= uart_flush_chars,
					|-> uart_start(tty);
						|-> __uart_start(tty);
							|->	if (!uart_tx_stopped(port))
									port->ops->start_tx(port);
									//8250_port.c
									<=> struct uart_ops serial8250_pops = {
											.start_tx	= serial8250_start_tx,

>>											

static const struct tty_operations uart_ops = {
	.start		= uart_start,
	|-> uart_start(tty);
		|-> __uart_start(tty);
			|->	if (!uart_tx_stopped(port))
					port->ops->start_tx(port);
						//8250_port.c
						<=> struct uart_ops serial8250_pops = {
								.start_tx	= serial8250_start_tx,

------
//8250_port.c
static void serial8250_start_tx(struct uart_port *port)
|
|-> if (up->dma && !up->dma->tx_dma(up))
		return;

--------------------------------------------------------------------------------

//8250_port.c
void serial8250_set_defaults(struct uart_8250_port *up)
|-- /* default dma handlers */
	if (up->dma) {
		if (!up->dma->tx_dma)
			up->dma->tx_dma = serial8250_tx_dma; //defined in 8250_dma.c
		if (!up->dma->rx_dma)
			up->dma->rx_dma = serial8250_rx_dma;
	}

*********************************************************************************
pci driver
module_pci_driver(serial_pci_driver); //8250_pci.c: Helper macro for registering a PCI driver
							|
							v
static struct pci_driver serial_pci_driver = {
	.name		= "serial", // /sys/bus/pci/drivers/serial/ ?
	.probe		= pciserial_init_one, //Probe one serial board.
	|
	|-- quirk = find_quirk(dev);
		if (quirk->probe) { // here quirk->probe is NULL
			rc = quirk->probe(dev);
			if (rc)
				return rc;
		}
	|
	|-- priv = pciserial_init_ports(dev, board);
		|-- // Find an init and setup quirks.
			quirk = find_quirk(dev);
			if (quirk->init) {
				rc = quirk->init(dev); // Run the new-style initialization function.







find_quirk
|-- for (quirk = pci_serial_quirks; ; quirk++)
					|-- static struct pci_serial_quirk pci_serial_quirks[] __refdata = {
							{
								.vendor		= PCI_VENDOR_ID_INTEL,
								.device		= PCI_DEVICE_ID_INTEL_BXT_B_UART0,//UART0~UART3
								.subvendor	= PCI_ANY_ID,
								.subdevice	= PCI_ANY_ID,
								.init		= bxt_serial_init,
								.setup		= bxt_serial_setup,
							},  |
								|--	bxt_serial_setup
									|-- pci_default_setup
										|-- setup_port(priv, port, bar, offset, board->reg_shift);
--------------------------------------------------------------------------------
uart_add_one_port


--------------------------------------------------------------------------------
8250_port.c

// Here we define the default xmit fifo size used for each type of UART.
static const struct serial8250_config uart_config[] = {
	[PORT_UNKNOWN] = {
		.name		= "unknown",
		.fifo_size	= 1,
		.tx_loadsz	= 1,
	},
	...
}

--------------------------------------------------------------------------------

serial8250_do_startup / serial8250_set_defaults / serial8250_config_port
|-> set_io_from_upio
	|-> p->handle_irq = serial8250_default_handle_irq;
		|-> serial8250_default_handle_irq
			|-> serial8250_handle_irq //8250_port.c: This handles the interrupt from one port.


// include/linux/serial_core.h
struct uart_port {
	int			(*handle_irq)(struct uart_port *);

--------------------------------------------------------------------------------
interrupt:
// This is the serial driver's interrupt routine.

static irqreturn_t serial8250_interrupt(int irq, void *dev_id)


//8250_core.c
static const struct uart_8250_ops univ8250_driver_ops = {
	.setup_irq	= univ8250_setup_irq,
	|-> retval = serial_link_irq_chain(up);
		|-> ret = request_irq(up->port.irq, serial8250_interrupt,


----
serial8250_interrupt
|-> if (port->handle_irq(port)) {

********************************************************************************
 
//This function is used to handle ports that do not have an interrupt. 
static void serial8250_timeout(unsigned long data)
{
	struct uart_8250_port *up = (struct uart_8250_port *)data;

	up->port.handle_irq(&up->port);
	mod_timer(&up->timer, jiffies + uart_poll_timeout(&up->port));
}


********************************************************************************
console
//8250_core.c
static struct console univ8250_console = {
	.name		= "ttyS",
	.write		= univ8250_console_write,
	.device		= uart_console_device,
	.setup		= univ8250_console_setup,
	.match		= univ8250_console_match,
	.flags		= CON_PRINTBUFFER | CON_ANYTIME,
	.index		= -1,
	.data		= &serial8250_reg,
};

static void univ8250_console_write(struct console *co, const char *s,
|-> // Print a string to the serial port trying not to disturb
	// any possible real use of the port...
	serial8250_console_write(up, s, count);
	|-> uart_console_write(port, s, count, serial8250_console_putchar);
		|-> serial8250_console_putchar
			|-> serial_port_out(port, UART_TX, ch);
				|-> up->serial_out(up, offset, value);

----
//?
set_io_from_upio
|-> p->serial_out = io_serial_out;
					|-> outb(value, p->iobase + offset);

********************************************************************************
obj/kernel/.config
CONFIG_SERIAL_8250_RSA=y
----
8250_core.c
univ8250_request_port
|-> serial8250_request_rsa_resource

----

univ8250_config_port
|-> serial8250_request_rsa_resource

----
univ8250_rsa_support
{   ops->config_port  = univ8250_config_port;
	ops->request_port = univ8250_request_port;
}
