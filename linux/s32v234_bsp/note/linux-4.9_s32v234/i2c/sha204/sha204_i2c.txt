

/dev/atsha0
===============================================
(1) struct i2c_driver:
	represent an I2C device driver


(2) struct sha204_chip
	|-> struct i2c_client *client;
	|-> struct miscdevice  miscdev;

miscdevice 
|-> const struct file_operations *fops;
	// define the file operations structure that forms the userspace API entry point



===============================================

module_init(sha204_module_init);
                     |
+--------------------+
|
|-> rc = i2c_add_driver(&sha204_i2c_driver);


static struct i2c_driver sha204_i2c_driver = {
	.driver = {
		.name  = "sha204-i2c",
		.owner = THIS_MODULE,
		.of_match_table = sha204_of_match,
	},
	.probe    =	sha204_i2c_probe,
	.remove   =	sha204_i2c_remove,
	.id_table =	sha204_i2c_ids,
};


sha204_i2c_probe
|-> chip->miscdev.fops   = &sha204_fops;

static struct file_operations sha204_fops = {
    .owner          = THIS_MODULE,
    .unlocked_ioctl = sha204_drv_ioctl,
    .open           = sha204_drv_open,
    .release        = sha204_drv_close
};


===============================================
sha204_drv_ioctl
|-> switch (cmd) {
        case SHA204_IOCTL_EXECUTE:
            rc = copy_from_user(&io_param,(void *)arg, sizeof(SHA204_EXEC_PARAM));
			sha204m_execute

-----------------------------------------------
sha204m_execute
|-> sha204c_send_and_receive
	|-> sha204p_send_command    ----+
		sha204p_receive_response    |
+-----------------------------------+
|                                    
+-> i2c_master_send //issue a single I2C message in master transmit mode
	//drivers/i2c/i2c-core.c
	|-> msg.addr = client->addr;
		msg.flags = client->flags & I2C_M_TEN;
		msg.len = count;
		msg.buf = (char *)buf;
	|-> i2c_transfer
		|-> _i2c_transfer


sha204p_receive_response
|-> msg.addr  = client->addr;
    msg.flags = client->flags | I2C_M_RD | I2C_M_RECV_LEN;
    msg.buf   = response;
    msg.len   = size;
|-> i2c_transfer


-----------------------------------------------
i2c_transfer
|-> ret = adap->algo->master_xfer(adap, msgs, num);

drivers/i2c/busses/i2c-imx.c

static struct i2c_algorithm i2c_imx_algo = {
	.master_xfer	= i2c_imx_xfer,
	.functionality	= i2c_imx_func,
};

------------
i2c_imx_xfer
|
|-> struct imx_i2c_struct *i2c_imx = i2c_get_adapdata(adapter);
|-> /* Start I2C transfer */
	result = i2c_imx_start(i2c_imx);
|-> /* read/write data */
	//for-loop:
	//(1) check: last msg ?

	//(2) repeated start:
	if (i) {
		dev_dbg(&i2c_imx->adapter.dev,
			"<%s> repeated start\n", __func__);
		temp = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2CR);
		temp |= I2CR_RSTA;
		imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2CR);
		result =  i2c_imx_bus_busy(i2c_imx, 1);
		if (result)
			goto fail0;
	}

	//(3) transfer message:
	if (msgs[i].flags & I2C_M_RD)
		result = i2c_imx_read(i2c_imx, &msgs[i], is_lastmsg);
	else {
		if (i2c_imx->dma && msgs[i].len >= DMA_THRESHOLD)
			result = i2c_imx_dma_write(i2c_imx, &msgs[i]);
		else
			result = i2c_imx_write(i2c_imx, &msgs[i]);
	}

========================================
i2c_imx_start
|-> i2c_imx_set_clk(i2c_imx);
	result = clk_prepare_enable(i2c_imx->clk);
|
|-> imx_i2c_write_reg(i2c_imx->ifdr, i2c_imx, IMX_I2C_IFDR);
	/* Enable I2C controller */
	imx_i2c_write_reg(i2c_imx->hwdata->i2sr_clr_opcode, i2c_imx, IMX_I2C_I2SR);
	imx_i2c_write_reg(i2c_imx->hwdata->i2cr_ien_opcode, i2c_imx, IMX_I2C_I2CR);
|
|-> /* Start I2C transaction */
	temp = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2CR);
	temp |= I2CR_MSTA;
	imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2CR);
	result = i2c_imx_bus_busy(i2c_imx, 1);
|
|-> temp |= I2CR_IIEN | I2CR_MTX | I2CR_TXAK;
	temp &= ~I2CR_DMAEN;
	imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2CR);

-----------------------
i2c_imx_set_clk

------------------
//include/linux/clk.h
clk_prepare_enable
|-> clk_prepare
|-> clk_enable

-----------------------
imx_i2c_write_reg
|-> writeb(val, i2c_imx->base + (reg << i2c_imx->hwdata->regshift));



-----------------------
imx_i2c_read_reg
|-> return readb(i2c_imx->base + (reg << i2c_imx->hwdata->regshift));

========================================
i2c_imx_bus_busy

========================================
i2c_imx_read
(1) write slave address:
	imx_i2c_write_reg((msgs->addr << 1) | 0x01, i2c_imx, IMX_I2C_I2DR);

	result = i2c_imx_trx_complete(i2c_imx);

	result = i2c_imx_acked(i2c_imx);

(2) setup bus to read data
	temp = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2CR);
	temp &= ~I2CR_MTX;
(3) read data
	a. if (i2c_imx->dma && msgs->len >= DMA_THRESHOLD && !block_data)
			return i2c_imx_dma_read(i2c_imx, msgs, is_lastmsg);
	b. read data
		for-loop:
		result = i2c_imx_trx_complete(i2c_imx);

		/*
		 * First byte is the length of remaining packet
		 * in the SMBus block data read. Add it to
		 * msgs->len.
		 */
		if ((!i) && block_data) {
			len = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2DR);
			if ((len == 0) || (len > I2C_SMBUS_BLOCK_MAX))
				return -EPROTO;
			msgs->len += len;
		}

		if (i == (msgs->len - 1)) {
			if (is_lastmsg) {
				//clear MSTA
				temp = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2CR);
				temp &= ~(I2CR_MSTA | I2CR_MTX);
				imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2CR);
				i2c_imx_bus_busy(i2c_imx, 0);
				i2c_imx->stopped = 1;
			} else {
				temp = readb(i2c_imx->base + IMX_I2C_I2CR);
				temp |= I2CR_MTX;
				writeb(temp, i2c_imx->base + IMX_I2C_I2CR);
			}

		} else if (i == (msgs->len - 2)) {
		//set TXAK
			temp = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2CR);
			temp |= I2CR_TXAK;
			imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2CR);

		}
		...
			msgs->buf[i] =  imx_i2c_read_reg(i2c_imx, IMX_I2C_I2DR);

-------------
i2c_imx_write
(1) write slave address
	imx_i2c_write_reg(msgs->addr << 1, i2c_imx, IMX_I2C_I2DR);
	result = i2c_imx_trx_complete(i2c_imx);

	result = i2c_imx_acked(i2c_imx);

(2) write data
	for-loop:
		imx_i2c_write_reg(msgs->buf[i], i2c_imx, IMX_I2C_I2DR);
		result = i2c_imx_trx_complete(i2c_imx);
		result = i2c_imx_acked(i2c_imx);

----------------
i2c_imx_dma_write

========================================

