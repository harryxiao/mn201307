IO

=======
标准IO：

行缓存：和终端相关，不能脱离终端，当前系统默认缓存区大小1K，fflush函数和\n可以刷新缓存区\
		相关流指针stdin  stdout
全缓存：和终端不相关，默认大小4K，全缓存中\n不刷新缓存区，用fflush函数刷新
不缓存：stderr标准错误流

fopen:
	r:  只读方式打开文件，并且文件必须事先存在。打开文件后指针指向文件开头
	r+: 和r方式除了多一个写权限，其他相同

	w:  只写的方式打开文件，如果文件不存在创建，存在清空。
	w+: 读写方式打开文件，如果文件不存在创建，存在清空。

	a:  只写的方式打开文件，如果文件不存在创建，存在从文件尾部添加
	a+: 读写方式打开文件，如果文件不存在创建，文件存在如果写从文件尾部写，\
	    如果直接读文件，从文件头读取内容；如果先写再读，读取不到内容;
	    如果是先读再写，只能从文件尾部写内容


=======
io模型：
	阻塞IO：      结构简单，读取多资源时，及时性差
	非阻塞IO：    读取多资源需要轮询，消耗cpu ，可以相对及时的读取数据
	多路复用IO ： 不需要轮询资源，可以及时读取任意资源
	异步信号驱动：先注册请求，等待信号到达后再进行操作

超时检测：
	1.setsockopt  设置套接字超时属性：一次设置，终身有效
	2.select      超时，每一次都要重新填充计数值
	3.alarm(5);   利用闹钟进行超时检测


