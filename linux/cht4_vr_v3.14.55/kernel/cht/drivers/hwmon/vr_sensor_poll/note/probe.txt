
================================================================================
1.
	module_spi_driver(psh_vr_driver);
--  Helper macro for registering a SPI driver

static struct spi_driver psh_vr_driver = {
	.driver = {
		.name	= "vr-sensor-spi-ipc",
		.owner	= THIS_MODULE,
		.pm = &psh_byt_pm_ops, 
	},
	.probe		= psh_probe,
	.remove     = psh_remove,
	.shutdown	= psh_shutdown,
};

2. psh_probe 

allocate and initialize struct psh_ext_if

static int psh_probe(struct spi_device *client)
(1) allocate memory for psh_ext_if
	<1> allocate memory for "struct psh_ext_if" which psh_if_info point to
|-- psh_if_info = kzalloc(sizeof(*psh_if_info), GFP_KERNEL);
	<2> allocate memory for psh_ia_priv, and initialize the structure
|-- ret = psh_ia_common_init(&client->dev, &psh_if_info->ia_data);
			|-- (a) allocate memory for psh_ia_priv, and store such a pointer to
					psh_if_info->ia_data;
				(b) initialize psh_ia_priv structure,
					(mutex,completion,list_head, ..)
				(c) dev_set_drvdata(dev, psh_ia_data);
				(d) create sysfs interface: &dev->kobj
	<3> initialize its members about send list(mutex members and list_head member)
|-- // initialize send list
    mutex_init(&psh_if_info->send_data_list.lock);
    mutex_init(&psh_if_info->workitem_mutex);
    INIT_LIST_HEAD(&psh_if_info->send_data_list.head);
    psh_if_info->task_flag = TASK_FLAG_CLEAR;

(2) register w/ hwmon device
|-- psh_if_info->hwmon_dev = hwmon_device_register(&client->dev);
(3) initialize its members: 
	<1> store struct psh_ext_if and struct spi_device pointer for future use
|--	psh_if_info->pshc = client;//struct spi_device - Master side proxy for an SPI slave device
|--	ia_data->platform_priv = psh_if_info;
	<2> initialize some gpio pin: ctl, rst, int,
|-- psh_if_info->gpio_psh_ctl = -1;
|-- psh_if_info->gpio_psh_rst = GPIO_PSH_MCU_RESET;
	rc = gpio_request(psh_if_info->gpio_psh_rst, "psh_rst");
	gpio_export(psh_if_info->gpio_psh_rst, 1);
	gpio_direction_output(psh_if_info->gpio_psh_rst, 1);
	gpio_set_value(psh_if_info->gpio_psh_rst, 1);
|-- client->irq = -1; // force polling mode
	psh_if_info->gpio_psh_int = GPIO_PSH_INT;
	rc = gpio_request(psh_if_info->gpio_psh_int, "psh_int");
	gpio_export(psh_if_info->gpio_psh_int, 1);
	gpio_direction_input(psh_if_info->gpio_psh_int);
(4) initialize workqueue: allocate a workqueue
|-- psh_if_info->wq = alloc_workqueue("%s", WQ_HIGHPRI, 0, "psh_work");
(5) initialize its members about profiler
|-- //just a profiler here
	timestamp_init_with_name(&client->dev, 
			&psh_if_info->io_profiler, "profile_pull");
	poller_init(&psh_if_info->poller_worker,
			poll_sensor_data_by_thread, psh_if_info);
    if (!IS_SUCCESS(poller_start(&client->dev,
                                 &psh_if_info->poller_worker)))
    ia_sync_timestamp_with_sensorhub_fw(psh_if_info->ia_data);
(6) initialize work_struct and delayed_work structures
|-- INIT_WORK(&psh_if_info->work, psh_work_func); //not used ?
|-- INIT_DELAYED_WORK(&psh_if_info->dwork, poll_sensor_data);

--------------------------------------------------------------------------------
psh_work_func

--------------------------------------------------------------------------------
static void poll_sensor_data(struct work_struct *work)
|-- struct psh_ext_if *psh_if_info = 
		container_of(work, struct psh_ext_if, dwork.work);

|-- mutex_lock(&psh_if_info->workitem_mutex);
|-- poll_sensor_data_normal(psh_if_info);
|-- mutex_unlock(&psh_if_info->workitem_mutex);
|-- /*continue polling if necessary*/
    if (TASK_FLAG_REQUEST_LOOP & psh_if_info->task_flag)
    |-- queue_delayed_work(psh_if_info->wq, &psh_if_info->dwork, POLLING_HZ);


--------------------------------------------------------------------------------
poll_sensor_data_normal(psh_if_info);
|-- struct psh_ia_priv *ia_data = psh_if_info->ia_data;
	if(!ia_data)
		return;
|-- lp_send_entry = remove_send_data_entry_from_list(psh_if_info);    
	if (lp_send_entry) {
        lp_send = lp_send_entry->data;
        send_size = lp_send_entry->used_size;
	} else {
        lp_send = psh_if_info->zero_send_buffer;
        send_size = sizeof(psh_if_info->zero_send_buffer);
    }

|-- INIT_SPI_IO_CONTEXT(&psh_if_info->send_data_list.low_spi_io_context);
|-- ret_value = do_io_transaction(psh_if_info->pshc, 
						&psh_if_info->send_data_list.low_spi_io_context,
						lp_send, send_size,
						psh_if_info->psh_frame, sizeof(psh_if_info->psh_frame),
						&receved_size);


|-- if (IS_SUCCESS(ret_value))
        if (0 != receved_size)
			process_received_data(psh_if_info,
					psh_if_info->psh_frame, receved_size);
|-- /*finished, so clear resource*/
    if (lp_send_entry)
        kfree(lp_send_entry);

--------------------------------------------------------------------------------
queue_delayed_work(psh_if_info->wq, &psh_if_info->dwork, POLLING_HZ);

--------------------------------------------------------------------------------






