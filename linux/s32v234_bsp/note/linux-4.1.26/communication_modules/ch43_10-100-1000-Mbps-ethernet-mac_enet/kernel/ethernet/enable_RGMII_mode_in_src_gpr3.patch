diff --git a/linux/drivers/net/ethernet/freescale/fec_main.c b/linux/drivers/net/ethernet/freescale/fec_main.c
index 1bda8d4..44b13bc 100644
--- a/linux/drivers/net/ethernet/freescale/fec_main.c
+++ b/linux/drivers/net/ethernet/freescale/fec_main.c
@@ -1593,6 +1593,7 @@ static void fec_get_mac(struct net_device *ndev)
 			const char *mac = of_get_mac_address(np);
 			if (mac)
 				iap = (unsigned char *) mac;
+			printk("#mn:fec mac:%x %x %x %x %x\n", mac[0], mac[1], mac[2], mac[3], mac[4]);
 		}
 	}
 
@@ -3205,8 +3206,10 @@ static void fec_reset_phy(struct platform_device *pdev)
 		msec = 1;
 
 	phy_reset = of_get_named_gpio(np, "phy-reset-gpios", 0);
-	if (!gpio_is_valid(phy_reset))
+	if (!gpio_is_valid(phy_reset)) {
+		printk("#mn: %s no phy_reset\n", __func__);
 		return;
+	}
 
 	err = devm_gpio_request_one(&pdev->dev, phy_reset,
 				    GPIOF_OUT_INIT_LOW, "phy-reset");
@@ -3215,6 +3218,7 @@ static void fec_reset_phy(struct platform_device *pdev)
 		return;
 	}
 	msleep(msec);
+	printk("#mn: %s now to reset phy", __func__);
 	gpio_set_value(phy_reset, 1);
 }
 #else /* CONFIG_OF */
@@ -3277,6 +3281,15 @@ fec_probe(struct platform_device *pdev)
 	int num_tx_qs;
 	int num_rx_qs;
 
+#define AIPS0_BASE_ADDR     (0x40000000)
+#define SRC_SOC_BASE_ADDR   (AIPS0_BASE_ADDR + 0x0007C000)
+#define GPR3_OFFSET 0X108
+#define GPR3 (SRC_SOC_BASE_ADDR+GPR3_OFFSET)
+
+	u32 *pgpr3;
+	pgpr3 = ioremap(GPR3, 4);
+	writel(readl(pgpr3) & ~(1<<1) | (1<<1), pgpr3);
+
 	fec_enet_get_queue_num(pdev, &num_tx_qs, &num_rx_qs);
 
 	/* Init network device */
