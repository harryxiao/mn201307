Using kgdb,kdb and the kernel debugger internal
https://www.kernel.org/doc/htmldocs/kgdb/index.html

Chapter 1.Introduction
======================
The kernel has two different debugger front ends (kdb and kgdb) which interface to the debug core. 

Kdb:
inspect memory, registers, process lists, dmesg, and even set breakpoints to stop in a certain location. Kdb is not a source level debugger

Kgdb:
a source level debugger

Chapter 2. Compiling a kernel
=============================
In order to enable compilation of kdb, you must first enable kgdb.

Kernel config options for kgdb
------------------------------
CONFIG_KGDB
look under "Kernel hacking" / "Kernel debugging" and select "KGDB: kernel debugger". 

have symbols in your vmlinux file:
turn on CONFIG_DEBUG_INFO which is called "Compile the kernel with debug info" in the config menu. 

It is advised, but not required, that you turn on the CONFIG_FRAME_POINTER kernel option which is called "Compile the kernel with frame pointers" in the config menu. This option inserts code to into the compiled executable which saves the frame information in registers or on the stack at different points which allows a debugger such as gdb to more accurately construct stack back traces while debugging the kernel. 

If the architecture that you are using supports the kernel option CONFIG_STRICT_KERNEL_RWX, you should consider turning it off. This option will prevent the use of software breakpoints because it marks certain regions of the kernel's memory space as read-only. 

Here is an example set of .config symbols to enable or disable for kgdb: 
    # CONFIG_STRICT_KERNEL_RWX is not set
    CONFIG_FRAME_POINTER=y
    CONFIG_KGDB=y
    CONFIG_KGDB_SERIAL_CONSOLE=y

Kernel config options for kdb
-----------------------------
The main config option for kdb is CONFIG_KGDB_KDB which is called "KGDB_KDB: include kdb frontend for kgdb" in the config menu. In theory you would have already also selected an I/O driver such as the CONFIG_KGDB_SERIAL_CONSOLE interface if you plan on using kdb on a serial port, when you were configuring kgdb. 

If you want to use a PS/2-style keyboard with kdb, you would select CONFIG_KDB_KEYBOARD which is called "KGDB_KDB: keyboard as input device" in the config menu. The CONFIG_KDB_KEYBOARD option is not used for anything in the gdb interface to kgdb. The CONFIG_KDB_KEYBOARD option only works with kdb.

Here is an example set of .config symbols to enable/disable kdb:
    # CONFIG_STRICT_KERNEL_RWX is not set
    CONFIG_FRAME_POINTER=y
    CONFIG_KGDB=y
    CONFIG_KGDB_SERIAL_CONSOLE=y
    CONFIG_KGDB_KDB=y
    CONFIG_KDB_KEYBOARD=y

Chapter 3. Kernel Debugger Boot Arguments
=========================================
Kernel parameter: kgdboc
------------------------

The kgdboc driver was originally an abbreviation meant to stand for "kgdb over console". Today it is the primary mechanism to configure how to communicate from gdb to kgdb as well as the devices you want to use to interact with the kdb shell. 

You can only make use of kgdbwait and early debugging if you build kgdboc into the kernel as a built-in. 

kgdboc arguments
----------------
Usage: kgdboc=[kms][[,]kbd][[,]serial_device][,baud]
    kms = Kernel Mode Setting
    kbd = Keyboard


Using loadable module or built-in
    1. As a kernel built-in:
       Use the kernel boot argument: kgdboc=<tty-device>,[baud]

    2. As a kernel loadable module:
       Use the command: modprobe kgdboc kgdboc=<tty-device>,[baud]

	   example:
        kgdboc=ttyS0,115200

Configure kgdboc at runtime with sysfs
    1. Enable kgdboc on ttyS0
    	echo ttyS0 > /sys/module/kgdboc/parameters/kgdboc

    2. Disable kgdboc
    	echo "" > /sys/module/kgdboc/parameters/kgdboc
NOTE: You do not need to specify the baud if you are configuring the console on tty which is already configured or open.

More examples
-------------

You can configure kgdboc to use the keyboard, and/or a serial device depending on if you are using kdb and/or kgdb, in one of the following scenarios.

    1. kdb and kgdb over only a serial port
		kgdboc=<serial_device>[,baud]
		Example: kgdboc=ttyS0,115200

    2. kdb and kgdb with keyboard and a serial port
		kgdboc=kbd,<serial_device>[,baud]
		Example: kgdboc=kbd,ttyS0,115200

    3. kdb with a keyboard
		kgdboc=kbd

    4. kdb with kernel mode setting
		kgdboc=kms,kbd

    5. kdb with kernel mode setting and kgdb over a serial port
		kgdboc=kms,kbd,ttyS0,115200

NOTE: Kgdboc does not support interrupting the target via the gdb remote protocol. You must manually send a sysrq-g unless you have a proxy that splits console output to a terminal program. A console proxy has a separate TCP port for the debugger and a separate TCP port for the "human" console. The proxy can take care of sending the sysrq-g for you.

When using kgdboc with no debugger proxy, you can end up connecting the debugger at one of two entry points. If an exception occurs after you have loaded kgdboc, a message should print on the console stating it is waiting for the debugger. In this case you disconnect your terminal program and then connect the debugger in its place. If you want to interrupt the target system and forcibly enter a debug session you have to issue a Sysrq sequence and then type the letter g. Then you disconnect the terminal session and connect gdb. Your options if you don't like this are to hack gdb to send the sysrq-g for you as well as on the initial connect, or to use a debugger proxy that allows an unmodified gdb to do the debugging. 



Kernel parameter: kgdbwait
--------------------------
The Kernel command line option kgdbwait makes kgdb wait for a debugger connection during booting of a kernel. You can only use this option if you compiled a kgdb I/O driver into the kernel and you specified the I/O driver configuration as a kernel command line option. The kgdbwait parameter should always follow the configuration parameter for the kgdb I/O driver in the kernel command line else the I/O driver will not be configured prior to asking the kernel to use it to wait.

The kernel will stop and wait as early as the I/O driver and architecture allows when you use this option. If you build the kgdb I/O driver as a loadable kernel module kgdbwait will not do anything. 


Kernel parameter: kgdbcon
-------------------------
Kernel parameter: kgdbcon

The kgdbcon feature allows you to see printk() messages inside gdb while gdb is connected to the kernel. Kdb does not make use of the kgdbcon feature.

Kgdb supports using the gdb serial protocol to send console messages to the debugger when the debugger is connected and running. There are two ways to activate this feature.

    1. Activate with the kernel command line option:
		kgdbcon

    2. Use sysfs before configuring an I/O driver
		echo 1 > /sys/module/kgdb/parameters/kgdb_use_con

    NOTE: If you do this after you configure the kgdb I/O driver, the setting will not take effect until the next point the I/O is reconfigured. 

IMPORTANT NOTE: You cannot use kgdboc + kgdbcon on a tty that is an active system console. An example of incorrect usage is console=ttyS0,115200 kgdboc=ttyS0 kgdbcon

It is possible to use this option with kgdboc on a tty that is not a system console. 


Run time parameter: kgdbreboot
------------------------------
 The kgdbreboot feature allows you to change how the debugger deals with the reboot notification. You have 3 choices for the behavior. The default behavior is always set to 0.

    1. echo -1 > /sys/module/debug_core/parameters/kgdbreboot
		Ignore the reboot notification entirely.

    2. echo 0 > /sys/module/debug_core/parameters/kgdbreboot
		Send the detach message to any attached debugger client.

    2. echo 1 > /sys/module/debug_core/parameters/kgdbreboot
		Enter the debugger on reboot notify.

Chapter 4. Using kdb
====================
Quick start for kdb on a serial port

This is a quick example of how to use kdb.
    1. Configure kgdboc at boot using kernel parameters:
        console=ttyS0,115200 kgdboc=ttyS0,115200
    OR
    Configure kgdboc after the kernel has booted; assuming you are using a serial port console:

        echo ttyS0 > /sys/module/kgdboc/parameters/kgdboc

    2. Enter the kernel debugger manually or by waiting for an oops or fault. There are several ways you can enter the kernel debugger manually; all involve using the sysrq-g, which means you must have enabled CONFIG_MAGIC_SYSRQ=y in your kernel config.

        - When logged in as root or with a super user session you can run:
        	echo g > /proc/sysrq-trigger
		- Example using minicom 2.2
			Press: Control-a
			Press: f
			Press: g

        - When you have telneted to a terminal server that supports sending a remote break
			Press: Control-]
			Type in:send break
			Press: Enter
			Press: g

3. From the kdb prompt you can run the "help" command to see a complete list of the commands that are available.

    Some useful commands in kdb include:
        lsmod -- Shows where kernel modules are loaded
        ps -- Displays only the active processes
        ps A -- Shows all the processes
        summary -- Shows kernel version info and memory usage
        bt -- Get a backtrace of the current process using dump_stack()
        dmesg -- View the kernel syslog buffer
        go -- Continue the system

4. When you are done using kdb you need to consider rebooting the system or using the "go" command to resuming normal kernel execution. If you have paused the kernel for a lengthy period of time, applications that rely on timely networking or anything to do with real wall clock time could be adversely affected, so you should take this into consideration when using the kernel debugger.

Quick start for kdb using a keyboard connected console
------------------------------------------------------


Chapter 5. Using kgdb / gdb
===========================

In order to use kgdb you must activate it by passing configuration information to one of the kgdb I/O drivers. If you do not pass any configuration information kgdb will not do anything at all. Kgdb will only actively hook up to the kernel trap hooks if a kgdb I/O driver is loaded and configured. If you unconfigure a kgdb I/O driver, kgdb will unregister all the kernel hook points.

All kgdb I/O drivers can be reconfigured at run time, if CONFIG_SYSFS and CONFIG_MODULES are enabled, by echo'ing a new config string to /sys/module/<driver>/parameter/<option>. The driver can be unconfigured by passing an empty string. You cannot change the configuration while the debugger is attached. Make sure to detach the debugger with the detach command prior to trying to unconfigure a kgdb I/O driver.

Connecting with gdb to a serial port
------------------------------------

    1. Configure kgdboc

    Configure kgdboc at boot using kernel parameters:

        kgdboc=ttyS0,115200

    OR

    Configure kgdboc after the kernel has booted:

        echo ttyS0 > /sys/module/kgdboc/parameters/kgdboc

2. Stop kernel execution (break into the debugger)

    In order to connect to gdb via kgdboc, the kernel must first be stopped. There are several ways to stop the kernel which include using kgdbwait as a boot argument, via a sysrq-g, or running the kernel until it takes an exception where it waits for the debugger to attach.

        - When logged in as root or with a super user session you can run:

        echo g > /proc/sysrq-trigger

        - Example using minicom 2.2

        Press: Control-a

        Press: f

        Press: g

        - When you have telneted to a terminal server that supports sending a remote break

        Press: Control-]

        Type in:send break

        Press: Enter

        Press: g

3.Connect from gdb

    Example (using a directly connected port):

        % gdb ./vmlinux
        (gdb) set remotebaud 115200
        (gdb) target remote /dev/ttyS0
        

    Example (kgdb to a terminal server on TCP port 2012):

        % gdb ./vmlinux
        (gdb) target remote 192.168.2.2:2012
        

    Once connected, you can debug a kernel the way you would debug an application program.

    If you are having problems connecting or something is going seriously wrong while debugging, it will most often be the case that you want to enable gdb to be verbose about its target communications. You do this prior to issuing the target remote command by typing in: set debug remote 1 

Remember if you continue in gdb, and need to "break in" again, you need to issue an other sysrq-g. It is easy to create a simple entry point by putting a breakpoint at sys_sync and then you can run "sync" from a shell or script to break into the debugger.

Chapter 6. kgdb and kdb interoperability
========================================
It is possible to transition between kdb and kgdb dynamically. The debug core will remember which you used the last time and automatically start in the same mode.

Switching between kdb and kgdb
------------------------------



It is possible to transition between kdb and kgdb dynamically. The debug core will remember which you used the last time and automatically start in the same mode.

Switching between kdb and kgdb

Switching from kgdb to kdb
Change from kdb to kgdb

Switching from kgdb to kdb

There are two ways to switch from kgdb to kdb: you can use gdb to issue a maintenance packet, or you can blindly type the command $3#33. Whenever the kernel debugger stops in kgdb mode it will print the message KGDB or $3#33 for KDB. It is important to note that you have to type the sequence correctly in one pass. You cannot type a backspace or delete because kgdb will interpret that as part of the debug stream.

    1. Change from kgdb to kdb by blindly typing:

    $3#33

    2. Change from kgdb to kdb with gdb

    maintenance packet 3

    NOTE: Now you must kill gdb. Typically you press control-z and issue the command: kill -9 %

Change from kdb to kgdb

There are two ways you can change from kdb to kgdb. You can manually enter kgdb mode by issuing the kgdb command from the kdb shell prompt, or you can connect gdb while the kdb shell prompt is active. The kdb shell looks for the typical first commands that gdb would issue with the gdb remote protocol and if it sees one of those commands it automatically changes into kgdb mode.

    1. From kdb issue the command:

    kgdb

    Now disconnect your terminal program and connect gdb in its place

    2.  At the kdb prompt, disconnect the terminal program and connect gdb in its place.

Running kdb commands from gdb
-----------------------------

It is possible to run a limited set of kdb commands from gdb, using the gdb monitor command. You don't want to execute any of the run control or breakpoint operations, because it can disrupt the state of the kernel debugger. You should be using gdb for breakpoints and run control operations if you have gdb connected. The more useful commands to run are things like lsmod, dmesg, ps or possibly some of the memory information commands. To see all the kdb commands you can run monitor help.

Example:

(gdb) monitor ps
1 idle process (state I) and
27 sleeping system daemon (state M) processes suppressed,
use 'ps A' to see all.
Task Addr       Pid   Parent [*] cpu State Thread     Command

0xc78291d0        1        0  0    0   S  0xc7829404  init
0xc7954150      942        1  0    0   S  0xc7954384  dropbear
0xc78789c0      944        1  0    0   S  0xc7878bf4  sh
(gdb)
  
Chapter 7. kgdb Test Suite
==========================

When kgdb is enabled in the kernel config you can also elect to enable the config parameter KGDB_TESTS. Turning this on will enable a special kgdb I/O module which is designed to test the kgdb internal functions.

The kgdb tests are mainly intended for developers to test the kgdb internals as well as a tool for developing a new kgdb architecture specific implementation. These tests are not really for end users of the Linux kernel. The primary source of documentation would be to look in the drivers/misc/kgdbts.c file.

The kgdb test suite can also be configured at compile time to run the core set of tests by setting the kernel config parameter KGDB_TESTS_ON_BOOT. This particular option is aimed at automated regression testing and does not require modifying the kernel boot config arguments. If this is turned on, the kgdb test suite can be disabled by specifying "kgdbts=" as a kernel boot argument. 



Chapter 8. Kernel Debugger Internals
====================================



kgdboc and uarts

The kgdboc driver is actually a very thin driver that relies on the underlying low level to the hardware driver having "polling hooks" to which the tty driver is attached. In the initial implementation of kgdboc the serial_core was changed to expose a low level UART hook for doing polled mode reading and writing of a single character while in an atomic context. When kgdb makes an I/O request to the debugger, kgdboc invokes a callback in the serial core which in turn uses the callback in the UART driver.

When using kgdboc with a UART, the UART driver must implement two callbacks in the struct uart_ops. Example from drivers/8250.c:

#ifdef CONFIG_CONSOLE_POLL
	.poll_get_char = serial8250_get_poll_char,
	.poll_put_char = serial8250_put_poll_char,
#endif
  

Any implementation specifics around creating a polling driver use the #ifdef CONFIG_CONSOLE_POLL, as shown above. Keep in mind that polling hooks have to be implemented in such a way that they can be called from an atomic context and have to restore the state of the UART chip on return such that the system can return to normal when the debugger detaches. You need to be very careful with any kind of lock you consider, because failing here is most likely going to mean pressing the reset button. 

kgdboc and uarts
================

The kgdboc driver is actually a very thin driver that relies on the underlying low level to the hardware driver having "polling hooks" to which the tty driver is attached. In the initial implementation of kgdboc the serial_core was changed to expose a low level UART hook for doing polled mode reading and writing of a single character while in an atomic context. When kgdb makes an I/O request to the debugger, kgdboc invokes a callback in the serial core which in turn uses the callback in the UART driver.

When using kgdboc with a UART, the UART driver must implement two callbacks in the struct uart_ops. Example from drivers/8250.c:

#ifdef CONFIG_CONSOLE_POLL
	.poll_get_char = serial8250_get_poll_char,
	.poll_put_char = serial8250_put_poll_char,
#endif

  Any implementation specifics around creating a polling driver use the #ifdef CONFIG_CONSOLE_POLL, as shown above. Keep in mind that polling hooks have to be implemented in such a way that they can be called from an atomic context and have to restore the state of the UART chip on return such that the system can return to normal when the debugger detaches. You need to be very careful with any kind of lock you consider, because failing here is most likely going to mean pressing the reset button.
